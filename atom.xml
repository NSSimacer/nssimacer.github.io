<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NSSimacer Ng</title>
  <subtitle>The quieter you become, the more you are able to hear.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.nssimacer.tech/"/>
  <updated>2017-01-01T12:12:28.262Z</updated>
  <id>https://blog.nssimacer.tech/</id>
  
  <author>
    <name>NSSimacer Ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016 Year in Review</title>
    <link href="https://blog.nssimacer.tech/post/89d31859/"/>
    <id>https://blog.nssimacer.tech/post/89d31859/</id>
    <published>2017-01-01T10:46:32.000Z</published>
    <updated>2017-01-01T12:12:28.262Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2016 已经过去，迎来 2017. 年轻的时候，每到年底，都异常兴奋，因为这几天可以放假，虽然现在也是放假状态，但是心情却和以往不同，尤其是今年。也许是今年发生的事情太多，还没来得及消化完，就已经走到了年末；也有可能是真的老了，心态不一样了。或者，两者兼有。</p>
<h2 id="学术"><a href="#学术" class="headerlink" title="学术"></a>学术</h2><p>去年的这个时候，没记错的话，应该还在实验室做实验，写论文，赶着月底的 Deadline; 巧合的是，今年仍然有一个 Deadline 要赶——月底投稿第三篇论文。2016-12-29 完成了中期答辩，也算是为 2016 的学术生活画下一个句号。真心地，感谢老师的指导，感谢家人的支持，感谢王贝的鼓励和协助，也感谢运气对我的垂爱。</p>
<h3 id="第一篇论文"><a href="#第一篇论文" class="headerlink" title="第一篇论文"></a>第一篇论文</h3><p>学术其实并没有占据 2016 太多的时间，归结于自己的幸运。第一篇文章，和老师商量之后，尝试着投了一个 CORE A 的会议（ICCS 2016），第一次投稿，被录用。当时已经有了 Plan B, 如果一投没中的话，后面继续投，降低会议等级。不管下半年的打算如何，在此之前，最好要有一篇 CORE C 以上的文章，心里才不会慌。事实上，论文被接收之后，准备出国开会花费的精力似乎比投稿要多。从层层递交材料，到办理签证，到出国，每个环节都是耗时耗力，好在坚持下来了，身边的同学都觉得，换作他们绝对直接放弃了，这也暴露了某些不可描述的问题 … 也是在这个过程中，自己的很多想法甚至三观被刷新多遍。Anyway, 一次宝贵的经历。</p>
<h3 id="第二篇论文"><a href="#第二篇论文" class="headerlink" title="第二篇论文"></a>第二篇论文</h3><p>第二篇论文是对第一篇论文的改进，所以很快就准备投稿了，8 月份投出去的，国庆节的时候收到被拒的消息，巧合的是，360 那天给我发 Offer 了。一投被拒对我并没有什么太大的影响，reviewer 的意见也是不痛不痒，跟老师商量了一下，对文章进行了一些修改，等待合适的机会二投，在 11 月份二投一个 CORE C 的会议（IASTED-MIC 2017）, 12 月份收到接收通知，松了一口气，原则上，算是达到了实验室毕业的硬性要求。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>我始终认为，充满未知和挑战的生活才是美好的。一年下来，我觉得自己还需要变得更加强大来从容应对生活中的各种挑战。感谢陪伴在我生活中的亲朋好友们，有了你们，生活更美好。</p>
<h3 id="美帝初体验"><a href="#美帝初体验" class="headerlink" title="美帝初体验"></a>美帝初体验</h3><p>年初，等论文结果的时候，没想过会有机会去美国体验生活。尽管准备材料的过程比较曲折，飞机落地的一刻，自由而清新的空气迎面而来，尽管经历了十几个小时的国际航班，但是丝毫没有感觉到疲惫。贪婪地呼吸着新鲜的空气，伴随着迎面而来的海风，兴奋到了极点。在接下来的几天，基友尽心尽责，带我们领略美国的风情。</p>
<p>从小在农村长大，十几岁搬到城里，大学到了更大点的城市，研究生来到帝都。十几年来，陆陆续续走过国内的一些城市和景点，心中的震撼感觉仍然不及第一次到达美国，也许是过程过于曲折 … 匆匆忙忙几天的行程，根本没有要倒时差的必要，一直在奔波，却并不觉得累，哪怕穿行在高温的沙漠。</p>
<p>我想，真正的自由，不是你可以披着阿猫阿狗的 ID 在网上当键盘侠，不是在现实生活中为所欲为。更重要的是一种心态，一种氛围，更是一种自信和从容。</p>
<h3 id="小外甥"><a href="#小外甥" class="headerlink" title="小外甥"></a>小外甥</h3><p>小外甥农历生日比我早一天，如今都快要会走路了，对萌萌的小朋友简直毫无抵抗力，尤其是现在的小朋友，活泼机灵。小外甥的到来，给家里增加了不少乐趣，也让家里热闹不少，期待着小朋友喊一声“舅舅”。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>原本打算毕业之后出国读个博士，回家过年的时候，跟家里商量了好久，把各种情况都跟家里说了个明白。后来发生了一些变故，对我的心态产生了比较大的影响，也让我重新思考毕业后的出路问题。</p>
<p>在完成美国之旅的规划后，尝试着进入找工作的节奏；从美国回来之后，正式全身心投入找工作中。关于找工作的点点滴滴，之前已经做过一个<a href="https://blog.nssimacer.tech/post/4bc356d2/">小结</a>，这里不再详述。秋招季节，感谢家人在背后的默默支持，感谢共同奋斗的同学朋友，感谢给我 offer 的各家面试官的认可。</p>
<p>找工作就像找对象，看缘分，你能决定的，就是让自己变得更优秀，才能在求职的过程中有主动权，有更多选择。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>2016, 经历了很多以往不敢想象的事情，心态也有了很大的转变；2017, 继续 (ง •_•)ง</p>
<blockquote>
<p>多读好书，每两周阅读一本非技术书</p>
<p>学好英语，把丢下的英语用起来，目标雅思 7 分</p>
<p>强化技术，读书 / 读源代码，写代码，夯实基础，了解技术动向</p>
<p>锻炼身体，把平下去的腹肌练回来，目标体重稳定在 60 kg</p>
<p>其他，随缘</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      如果过去就让它过去，以后只会越来越糟。
    
    </summary>
    
      <category term="Blabbering" scheme="https://blog.nssimacer.tech/categories/Blabbering/"/>
    
    
      <category term="Life" scheme="https://blog.nssimacer.tech/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>在 WAMP 本地部署 PhpStorm 项目</title>
    <link href="https://blog.nssimacer.tech/post/cf3cd3c1/"/>
    <id>https://blog.nssimacer.tech/post/cf3cd3c1/</id>
    <published>2016-12-20T12:21:28.000Z</published>
    <updated>2016-12-21T00:48:05.127Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;也许以后工作中会接触 PHP, 趁现在有空，捣腾一下。第一次接触 PHP, 有了之前 Java / Python / Scala 跳坑的经历，这次没那么慌。尝试着在 PhpStorm 中建立一个简单的 Demo, 然后将其部署到 WAMP 的本地服务器上。</p>
<h2 id="PHP-是什么"><a href="#PHP-是什么" class="headerlink" title="PHP 是什么"></a>PHP 是什么</h2><blockquote>
<p>PHP 是世界上最好的语言！</p>
</blockquote>
<p>不要小看这句话的威力，把它投放到合适的场合，足够挑起一场圣战，摧毁一帮程序员之间坚实的友(ji)谊(qing)！这不是演习，非战斗人员请迅速撤离。</p>
<p>好了，言归正传。</p>
<blockquote>
<p>PHP (“PHP: Hypertext Preprocessor”, 超文本预处理器的字母缩写）是一种被广泛应用的开放源代码的多用途脚本语言，它可嵌入到 HTML 中，尤其适合 Web 开发。</p>
</blockquote>
<p>这是 PHP 官网对 PHP 的简介，言简意赅。作为一种运行在服务端的动态脚本语言，PHP 最广泛的用途是作为服务端脚本语言，用于构建 Web 应用。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>既然要构建 Web 应用，自然少不了几个关键元素：服务器，数据库再加上 PHP 解析引擎。这几个元素可以独立配置，针对不同平台，PHP 也有相应的环境整合工具，例如 LAMP, WAMP 和 XAMPP 等，这些都是免费的。</p>
<p>为了便于以后的学习，本文使用 WAMP 进行测试，其实单独安装和配置这几个组件也不难。</p>
<h3 id="WAMP-安装"><a href="#WAMP-安装" class="headerlink" title="WAMP 安装"></a>WAMP 安装</h3><p>WAMP 的安装很简单，基本一路无脑 Next 就行。</p>
<ol>
<li><a href="http://www.wampserver.com/en/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载 WAMP;</li>
<li><p>安装，一路 Next 即可</p>
<p> <img src="http://i.imgur.com/Vo4cPqx.png" alt=""></p>
<p> <img src="http://i.imgur.com/JNJLDoZ.png" alt=""></p>
<p> <img src="http://i.imgur.com/uKnZFfj.png" alt=""></p>
<p> <img src="http://i.imgur.com/LFth9As.png" alt=""></p>
<p> <img src="http://i.imgur.com/aAQZOTu.png" alt=""></p>
<p> <img src="http://i.imgur.com/XcuwHKo.png" alt=""></p>
<p> <img src="http://i.imgur.com/76OG76q.png" alt=""></p>
<p> <img src="http://i.imgur.com/raXkz31.png" alt=""></p>
</li>
<li><p>启动 WAMP, 任务栏出现绿色的 logo, 表示 WAMP 启动成功</p>
<p> <img src="http://i.imgur.com/sRDKeWy.png" alt="WAMP 启动成功"></p>
<p> 如果没有启动成功，可以考虑这几个因素：</p>
<ol>
<li>端口占用，在 Windows 平台，我就遇到 80 端口被 IIS 占用的情况，所以我把 Apache 服务器的端口改成了 8888;</li>
<li>数据库冲突，因为之前已经单独安装了 MySQL 数据库，可能也会造成端口冲突，或者环境变量覆盖，造成 MySQL 服务无法正常启动。对于端口冲突，修改端口可以解决；对于后者，可能只能在 WAMP 带的 MySQL 和原有的 MySQL 二选一了，推荐将单独配置的数据迁移到 WAMP 带的 MySQL 中。</li>
</ol>
</li>
<li><p>打开浏览器，输入 <code>http://localhost:8888/phpmyadmin/</code>, 你会看到类似的页面</p>
<p> <img src="http://i.imgur.com/y9uJJuB.png" alt="phpmyadmin"></p>
</li>
<li><p>关于 WAMP 的后续配置，在实际项目中根据需要可以进行定制。</p>
</li>
</ol>
<h3 id="IDE-选择"><a href="#IDE-选择" class="headerlink" title="IDE 选择"></a>IDE 选择</h3><p>习惯了用 Sublime Text 写 Python, 切换到 IDE 会有点不习惯，好在 JetBrains 出了 IDEA 和 PyCharm 这两个良心之作，果断入手 PhpStorm. 仍然可以使用学生账号免费使用教育版，到期可续。 </p>
<h2 id="部署与测试"><a href="#部署与测试" class="headerlink" title="部署与测试"></a>部署与测试</h2><p>一图胜千言，直接看图。</p>
<ol>
<li><p>新建项目</p>
<p> <img src="http://i.imgur.com/hJITPEb.png" alt="新建项目"></p>
</li>
<li><p>编辑运行配置</p>
<p> <img src="http://i.imgur.com/BSz3PmJ.png" alt="Edit Configurations ..."></p>
<p> <img src="http://i.imgur.com/Y1SilIW.png" alt="点击绿色的 + 号，选择 PHP Web Application"></p>
<p> <img src="http://i.imgur.com/7fGsZKw.png" alt="新建 Server, 配置名称，地址，端口"></p>
<p> <img src="http://i.imgur.com/XQs5Ebv.png" alt="应用配置，设置名称，访问起始路径"></p>
</li>
<li><p>部署配置</p>
<p> <img src="http://i.imgur.com/3qehSVA.png" alt="Tools -&gt; Deployment -&gt; Configuration ..."></p>
<p> <img src="http://i.imgur.com/SMPwj3l.png" alt="Type: Local or mounted folder; Folder: WAMP 的 www 目录；服务器根路径：http://localhost:8888/"></p>
<p> <img src="http://i.imgur.com/UQl6byd.png" alt="映射配置"></p>
<p> <img src="http://i.imgur.com/TQTJJuj.png" alt="Tools -&gt; Deployment -&gt; Automatic Upload, 配置自动上传到服务器，实现修改后自动部署"></p>
</li>
<li><p>再到     <code>Tools -&gt; Deployment -&gt; Upload to My Server</code> 将项目上传到服务器；</p>
</li>
<li><p>访问测试，打开 <code>http://localhost:8888/firstphp/</code></p>
<p> <img src="http://i.imgur.com/vcevnVo.png" alt="测试页面"></p>
</li>
<li><p>Done!</p>
</li>
</ol>
<h2 id="跳坑-amp-填坑"><a href="#跳坑-amp-填坑" class="headerlink" title="跳坑 &amp; 填坑"></a>跳坑 &amp; 填坑</h2><p>WAMP 安装过程中，似乎并没有给 MySQL 数据库设置密码这一选项，所以在测试的时候，会遇到 <code>#1045 - Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code> 这个迷一般的错误提示，这时候有两种解决方式：</p>
<ul>
<li><p>打开 cmd, 输入命令</p>
  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>这时候会提示你输入密码，然而此时并没有密码，直接回车即可进入 MySQL 数据库，然后更新密码

<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'pass'</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>启动 WAMP 后，在进入 <code>http://localhost:8888/phpmyadmin/</code> 时，会要求输入用户名和密码，用户名 <code>root</code>, 密码空着，回车，进入管理界面，然后在管理界面修改密码</p>
<p>  <img src="http://i.imgur.com/NOJSDoQ.png" alt=""></p>
<p>  <img src="http://i.imgur.com/07CFGD3.png" alt=""></p>
</li>
</ul>
<p>接着修改配置文件 <code>config.inc.php</code>, 在 <code>C:\wamp64\apps\phpmyadmin4.6.4</code>, 修改如下</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'password'</span>] = <span class="string">'pass'</span></div></pre></td></tr></table></figure>
<p>重启 WAMP 即可。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>简单感受了一下语法，看了一些项目。感觉拍黄片，哦不，PHP, 还是蛮有意思的。算是开了一个坑吧，想想做点有趣的事来填填这个坑 (ง •_•)ง</p>
<p>顺便测试一下在博客中插入音乐播放插件，来一首 <code>Devil&#39;s Tears</code></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=33544176&auto=1&height=66"></iframe>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://secure.php.net/manual/zh/intro-whatis.php" rel="external nofollow noopener noreferrer" target="_blank">PHP 是什么？</a></li>
<li><a href="https://stackoverflow.com/questions/16845715/1045-access-denied-for-user-rootlocalhost-using-password-yes" rel="external nofollow noopener noreferrer" target="_blank">#1045 - Access denied for user ‘root’@’localhost’ (using password: YES)</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      初次接触 PHP, 尝试将在 PhpStorm 中建立的 PHP 项目部署到 WAMP 本地服务器上。
    
    </summary>
    
      <category term="PHP" scheme="https://blog.nssimacer.tech/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.nssimacer.tech/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>基于 Windows 环境的 Theano 配置</title>
    <link href="https://blog.nssimacer.tech/post/be38ddb5/"/>
    <id>https://blog.nssimacer.tech/post/be38ddb5/</id>
    <published>2016-12-12T14:54:53.000Z</published>
    <updated>2016-12-13T07:20:51.291Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;关于 Theano 的安装，<a href="https://github.com/Theano/Theano/wiki/WindowsInstallation" rel="external nofollow noopener noreferrer" target="_blank">这里</a>其实有一份比较详细的 Wiki 了。但是在使用 GPU 的时候，不出所料，又遇到坑了。</p>
<blockquote>
<p>CNMeM is disabled, CuDNN not available.</p>
<p>AttributeError: ‘module’ object has no attribute ‘tests’</p>
<p>ERROR (theano.sandbox.cuda): ERROR: Not using GPU. Initialisation of device 0 failed： initCnmem: cnmemInit call failed! Reason=CNMEM_STATUS_OUT_OF_MEMORY.</p>
</blockquote>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ol>
<li>OS Platform: Windows 10 Pro Insider Preview, Build 14971;</li>
<li>System Type: 64 bit, x64 based processor;</li>
<li>Display Adapters: NVIDIA GeForce GTX TITAN X;</li>
<li>Python: 2.7.12, 64 bit;</li>
<li>Python IDE: Sublime Text 3, Build 3126;</li>
<li>Microsoft Visual Studio: 11.0.</li>
</ol>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="MinGW-配置"><a href="#MinGW-配置" class="headerlink" title="MinGW 配置"></a>MinGW 配置</h3><blockquote>
<p>MinGW, a contraction of “Minimalist GNU for Windows”, is a minimalist development environment for native Microsoft Windows applications.</p>
</blockquote>
<p>安装 Theano 的时候会用到 <a href="http://www.mingw.org/" rel="external nofollow noopener noreferrer" target="_blank">MinGW</a>, 同时为了避免后续产生编译错误，MinGW 不仅仅是 C / C++ 编译器，而是一套 GNU 工具集合。除了 GCC (GNU 编译器集合)，MinGW 还包含有一些其他的 GNU 程序开发工具，安装和配置 MinGW 可以参考<a href="https://my.oschina.net/u/588967/blog/73501" rel="external nofollow noopener noreferrer" target="_blank">这篇博文</a>。我的 MinGW 安装在 <code>C:\MinGW</code>, 下文会用到。</p>
<p>如果之前已经安装 MinGW, 可能需要更新 gcc / g++. 打开 cmd, 依次输入如下命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; mingw-get update</div><div class="line">&gt; mingw-get upgrade gcc</div><div class="line">&gt; mingw-get upgrade g++</div></pre></td></tr></table></figure>
<h3 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h3><p>两种选择：</p>
<ol>
<li><p>单独安装</p>
<ul>
<li>安装 Python 比较简单，直接到<a href="https://www.python.org/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载，然后一路 Next 就行；</li>
<li>安装 Python 包管理工具 <a href="https://pypi.python.org/pypi/pip" rel="external nofollow noopener noreferrer" target="_blank">pip</a>;</li>
<li><p>安装必要的 Python 第三方库，例如 <code>scipy</code>, <code>numpy</code>, <code>pycuda</code> 等，推荐到<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>下载相应的库，然后定位到存放下载的库的位置，打开 cmd, 用下述命令安装下载的库</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; pip install &lt;package-name&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>安装 Python 其他发行版（强烈推荐）</strong>。如果你之前没有接触过 Python，比较推荐安装其他 Python 的发行版，例如  <a href="https://www.continuum.io/downloads" rel="external nofollow noopener noreferrer" target="_blank">Anaconda</a>, 类似的发行版可以让你免去 Python 包管理和环境管理的烦恼。作为 Python 的一个发行版，Anaconda 打包了很多 Python 第三方库，支持 virtualenv, pyenv 等虚拟工作环境。</p>
</li>
</ol>
<h2 id="Theano-安装和配置"><a href="#Theano-安装和配置" class="headerlink" title="Theano 安装和配置"></a>Theano 安装和配置</h2><h3 id="Theano-基础版安装"><a href="#Theano-基础版安装" class="headerlink" title="Theano 基础版安装"></a>Theano 基础版安装</h3><p>由于我没有使用 Anaconda, 而是使用单独安装的 Python, 因此需要使用 pip 来安装 Theano，在 cmd 输入命令 </p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; pip install theano</div></pre></td></tr></table></figure>
<h3 id="Theano-开发版安装"><a href="#Theano-开发版安装" class="headerlink" title="Theano 开发版安装"></a>Theano 开发版安装</h3><p>后面在调试的时候遇到某些奇怪的坑，将 Theano 升级到开发版可以解决。有相关的 issue 和<a href="https://stackoverflow.com/questions/26499269/attributeerror-in-theano" rel="external nofollow noopener noreferrer" target="_blank">问题讨论</a>，直接安装或者更新基础版到开发版的命令如下</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git</div></pre></td></tr></table></figure>
<h3 id="Theano-配置"><a href="#Theano-配置" class="headerlink" title="Theano 配置"></a>Theano 配置</h3><p>在系统用户根目录，例如 <code>C:\Users\&lt;UserName&gt;</code> 下创建一个名为 <code>.theanorc</code> 或者 <code>.theanorc.txt</code> 的文件，编辑其内容为</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[blas]</div><div class="line">ldflags =</div><div class="line"><span class="comment"># ldflags = -lopenblas # placeholder for openblas support</span></div><div class="line"></div><div class="line">[gcc]</div><div class="line">cxxflags = -IC:\MinGW</div><div class="line"><span class="comment">### 路径不要填错，否则会被坑</span></div></pre></td></tr></table></figure>
<h2 id="在-Theano-中使用-GPU"><a href="#在-Theano-中使用-GPU" class="headerlink" title="在 Theano 中使用 GPU"></a>在 Theano 中使用 GPU</h2><h3 id="CUDA-安装"><a href="#CUDA-安装" class="headerlink" title="CUDA 安装"></a>CUDA 安装</h3><p>去<a href="https://developer.nvidia.com/cuda-downloads" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载相应平台上的 CUDA 并安装，我安装的是 CUDA 7.5 64 bit for Windows 10.</p>
<h3 id="Microsoft-Visual-Studio-安装"><a href="#Microsoft-Visual-Studio-安装" class="headerlink" title="Microsoft Visual Studio 安装"></a>Microsoft Visual Studio 安装</h3><p>去<a href="https://www.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载并安装，下面会用到。我安装的是 Visual Studio 2012 64 bit 版本，位置默认是 <code>C:\Program Files (x86)\Microsoft Visual Studio 11.0</code></p>
<h3 id="Theano-中的-GPU-配置"><a href="#Theano-中的-GPU-配置" class="headerlink" title="Theano 中的 GPU 配置"></a>Theano 中的 GPU 配置</h3><p>在上文提到的文件 <code>.theanorc</code> 或者 <code>.theanorc.txt</code> 中追加如下内容</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[nvcc]</div><div class="line">fastmath = True</div><div class="line">flags = -LC:\Python27\libs</div><div class="line">compiler_bindir = C:\Program Files (x86)\Microsoft Visual Studio <span class="number">11.0</span>\VC\bin</div><div class="line"></div><div class="line">[global]</div><div class="line">device = gpu0</div><div class="line">floatX = float32</div><div class="line">optimizer = fast_run</div></pre></td></tr></table></figure>
<h2 id="测试-amp-填坑"><a href="#测试-amp-填坑" class="headerlink" title="测试 &amp; 填坑"></a>测试 &amp; 填坑</h2><p>打开 cmd, 进入 Python 环境，输入</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import theano</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Using gpu device <span class="number">0</span>: GeForce GTX TITAN X (CNMeM is disabled, CuDNN not available)</div></pre></td></tr></table></figure>
<ol>
<li><p>在 Theano 配置文件中追加</p>
 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[lib]</div><div class="line">cnmem = <span class="number">1.0</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置 CuDNN</p>
<p> 到<a href="https://developer.nvidia.com/cudnn" rel="external nofollow noopener noreferrer" target="_blank">官网</a>注册并下载与 CUDA 版本匹配的 cuDNN 的压缩包，解压之后，将 <code>bin</code> 目录添加到系统环境变量 PATH 中，将 <code>lib</code> 和 <code>include</code> 目录中的文件分别复制到 CUDA 安装目录的对应 <code>lib</code> 和 <code>include</code> 目录中，我的目录是 <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5</code>。</p>
</li>
</ol>
<p>重新打开 cmd, 进入 Python 环境，再次运行</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import theano</div></pre></td></tr></table></figure>
<p>可能有类似提示</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR (theano.sandbox.cuda): ERROR: Not using GPU. Initialisation of device <span class="number">0</span> failed： </div><div class="line">initCnmem: cnmemInit call failed! Reason=CNMEM\_STATUS\_OUT\_OF\_MEMORY.</div></pre></td></tr></table></figure>
<p>这时候，将配置文件中的 <code>cnmem = 1.0</code> 值调小一些即可。</p>
<p>后面再测试，遇到类似提示</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AttributeError: <span class="string">'module'</span> object has no attribute <span class="string">'tests'</span></div></pre></td></tr></table></figure>
<p>这个时候，根据提示用 pip 安装缺少的模块，或者更新一下 Theano 通常可以解决。</p>
<p>最后输出如下</p>
<p><img src="http://i.imgur.com/Y6gsUp1.png" alt="配置成功后的 Theano 测试输出"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没想到调个 GPU 还能搞出这么多事来，感觉深度学习结合 GPU 编程相关的配置还是很原始啊，给无脑调库增加了一些难度。</p>
<p>Lucille is THIRSTY</p>
<p><img src="https://ih1.redbubble.net/image.205094537.8578/ap,550x550,12x16,1,transparent,t.png" alt="Lucille is THIRSTY"></p>
<p>不好意思，走错片场。</p>
<p>好了，TITAN X 已经饥渴难耐 (ง •_•)ง</p>
<p><img src="http://i.imgur.com/BLoUa5F.jpg" alt="工作中的 TITAN X"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://github.com/Theano/Theano/wiki/WindowsInstallation" rel="external nofollow noopener noreferrer" target="_blank">Theano Windows Installation</a></li>
<li><a href="https://github.com/Theano/Theano/wiki" rel="external nofollow noopener noreferrer" target="_blank">Theano 中文安装指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      接下来准备结合深度学习做点实验，不能让工作站的 GTX TITAN X 闲着，于是尝试着在 Windows 上安装 Theano 和配置 GPU.
    
    </summary>
    
      <category term="Theano" scheme="https://blog.nssimacer.tech/categories/Theano/"/>
    
    
      <category term="Theano" scheme="https://blog.nssimacer.tech/tags/Theano/"/>
    
      <category term="CUDA" scheme="https://blog.nssimacer.tech/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>IT 从业者职业生涯的 Naive 思考</title>
    <link href="https://blog.nssimacer.tech/post/dad6fb8f/"/>
    <id>https://blog.nssimacer.tech/post/dad6fb8f/</id>
    <published>2016-12-11T14:55:07.000Z</published>
    <updated>2016-12-11T14:57:29.494Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;职业生涯规划，这个话题算是面试中的高频题了。面试的时候，我们总是想着如何说得天花乱坠让面试官眼前一亮，然而面试之外，我们也应该思考如何给自己一个满意的答案。这几天看到牛客上相关的讨论 <sup><a href="https://www.nowcoder.com/discuss/19894" rel="external nofollow noopener noreferrer" target="_blank">1</a>, <a href="https://www.nowcoder.com/discuss/19919" rel="external nofollow noopener noreferrer" target="_blank">2</a></sup>，有感而发，可能有点 Naive.</p>
<a id="more"></a>
<p>&emsp;&emsp;过去的一周在憋中期报告，感慨书到用时方恨少啊，把自己研究的东西总结成一个报告，却发现写了几句就不晓得要怎么下笔了 … 回到 IT 从业者（程序员）职业生涯这个沉重的话题。</p>
<h2 id="程序员是吃青春饭的职业吗"><a href="#程序员是吃青春饭的职业吗" class="headerlink" title="程序员是吃青春饭的职业吗"></a>程序员是吃青春饭的职业吗</h2><p>哪个行业不是吃青春饭的行业，不然干嘛要规定退休？</p>
<p>说“程序员是吃青春饭的职业”的人，基本都是外行，至于出于什么心态说出这种话，不好揣测。</p>
<p>有一个可能的原因，一部分程序员是在重复自己，10 年工作经验 ≠ 用 1 年工作经验混 10 年。没有在工作中得到提高，当然要被淘汰。然而，又有哪个行业不是这样？</p>
<p>不管哪个行业，我觉得正确的心态应该是活到老，学到老。以 IT 为例，初入职场，先把技术练到位，后期发展再根据个人情况选择技术或者偏管理。</p>
<h2 id="程序员是很没有社会地位-幸福感-很-Low-的职业吗"><a href="#程序员是很没有社会地位-幸福感-很-Low-的职业吗" class="headerlink" title="程序员是很没有社会地位 / 幸福感 / 很 Low 的职业吗"></a>程序员是很没有社会地位 / 幸福感 / 很 Low 的职业吗</h2><blockquote>
<p>没搞明白为啥会有人觉得计算机是 Low 逼行业/没社会地位。判断一个正当 / 正常行业(咱不扯一般年轻小伙子无法触摸的行业) Low 不 Low，咱简单粗暴一点，看薪资，没有几个行业薪资能高过计算机吧；不要说搞计算机的是拿命换钱，哪个行业不是？可悲的是，大多数行业的年轻小伙子拿命都换不来钱，生物化学是啥状况你问问身边同学就明白，但是也没人说他们 Low 对吧；计算机行业加班相对严重，这是不争的事实，然而这跟 Low 也扯不上半毛钱关系。非要说 Low，我觉得一个重要的原因是，程序员经常跟计算机打交道，接触网络的机会也比较多，自嘲自黑多了，某些 SB 外行信以为真了，看到搞计算机的就打上码农，屌丝，Low 逼的 tag，旁人一附和，集体高潮。这是挺可悲的一件事。至于个人，我觉得最理想的状态是兴趣即工作，we create the world.</p>
</blockquote>
<p>回复于牛客。</p>
<p>有人觉得只看薪资太狭隘，但是社会地位啥的也不好量化啊，能量化也不见得程序员就低于正常水平。</p>
<p>还有人觉得只看薪资太误导人</p>
<blockquote>
<p>误导啥了，绝大多数人工作不是为了拿工资？那既然提到工作/行业和地位的关系，简单粗暴一点比较工资有何不妥？我也讲得很清楚了啊，“咱不扯一般年轻小伙子无法触摸的行业”。<strong>程序员是普通人，不牛逼，但也绝不至于 Low 逼。</strong>年轻小伙子跟省长甚至跟鑫胖比，有谁不是 Low 逼 …</p>
</blockquote>
<h2 id="程序员是钱多话少死得早的职业吗"><a href="#程序员是钱多话少死得早的职业吗" class="headerlink" title="程序员是钱多话少死得早的职业吗"></a>程序员是钱多话少死得早的职业吗</h2><p>360 行，行行转 CS. </p>
<p>不要老想着搞个大新闻，某些人为了押韵，什么鬼话都讲得出口的。</p>
]]></content>
    
    <summary type="html">
    
      作为马上踏入职场的“小鲜肉”，关于 IT 从业者职业生涯的一点 Naive 思考
    
    </summary>
    
      <category term="Blabbering" scheme="https://blog.nssimacer.tech/categories/Blabbering/"/>
    
    
      <category term="Blabbering" scheme="https://blog.nssimacer.tech/tags/Blabbering/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫初探</title>
    <link href="https://blog.nssimacer.tech/post/40d32e9/"/>
    <id>https://blog.nssimacer.tech/post/40d32e9/</id>
    <published>2016-12-04T07:20:54.000Z</published>
    <updated>2016-12-05T00:37:44.498Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前前后后写过几次爬虫，主要用来追美剧，爬数据，查字典啥的。准备在以后练手的时候顺便写点笔记记录一下。</p>
<h2 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h2><blockquote>
<p>网络蜘蛛（Web spider）也叫网络爬虫（Web crawler），蚂蚁（ant），自动检索工具（automatic indexer），或者（在 FOAF 软件概念中）网络疾走（WEB scutter），是一种“自动化浏览网络”的程序，或者说是一种网络机器人。它们被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。它们可以自动采集所有其能够访问到的页面内容，以供搜索引擎做进一步处理（分检整理下载的页面），而使得用户能更快的检索到他们需要的信息。</p>
</blockquote>
<p>这段解释来自 Wikipedia, 直白点来讲，就是通过用代码编写脚本，模拟浏览器的行为，达到高效访问或者获取网络资源的目的。所以，按照饼厂的价值观，写爬虫脚本是要被开除的（开个玩笑 …</p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>在编写爬虫之前，我们需要了解和掌握一些基本技能。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>工欲善其事，必先利其器。强烈推荐 <a href="https://www.sublimetext.com/3" rel="external nofollow noopener noreferrer" target="_blank">Sublime Text 3</a> 和 <a href="https://www.jetbrains.com/pycharm/" rel="external nofollow noopener noreferrer" target="_blank">PyCharm</a>, 覆盖各个平台，算是为数不多的让我有付费购买的冲动的软件产品。当然，前者可以免费试用，后者可以使用教育版，到期可以续，简直业界良心。具体如何折腾和使用这些工具，这里不作介绍，网上有相应的教程。</p>
<h3 id="Python-入门"><a href="#Python-入门" class="headerlink" title="Python 入门"></a>Python 入门</h3><p>提到 Python, 可能很多人的第一反应就是爬虫脚本。事实上，你可以用任何语言写爬虫，完全看你个人喜好；Python 也可以用于其他场景，例如 Web 开发。相比于其他语言，Python 上手快，强大、成熟的第三方库和框架支持，代码简洁优雅 … 使得 Python 适合快速实现，快速验证。</p>
<p>这里不会讲解 Python 相关的内容。要入门 Python，其实现在网络上已经有不少的教程，Google 一下。这里安利一下廖雪峰的 <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" rel="external nofollow noopener noreferrer" target="_blank">Python 2.7 教程</a>，当然你想学 Python 3.x 也没问题，<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" rel="external nofollow noopener noreferrer" target="_blank">Python 教程</a>，建议跳过最后安排的实战部分，不适合入门训练。看书的话，两本免费的 <a href="https://python.swaroopch.com/" rel="external nofollow noopener noreferrer" target="_blank">A Byte of Python</a> 和 <a href="http://www.diveintopython.net/" rel="external nofollow noopener noreferrer" target="_blank">Dive Into Python</a>, 都有对应的 2.x 和 3.x 版本，看完之后，上手 Python 基本没啥问题了，遇到问题，最好的办法是先思考，然后 Google.</p>
<p>爬虫中涉及到的 Python 主要知识：</p>
<ul>
<li>编码 / 解码，编码 / 解码问题是 Python 2.x 的一个坑，这个问题可以另开一篇博客讨论；</li>
<li>正则表达式，对应 <code>re</code> 模块，顺便安利一个学习和编写正则表达式的工具，<a href="https://www.regexbuddy.com/" rel="external nofollow noopener noreferrer" target="_blank">RegexBuddy</a>；</li>
<li>裸写爬虫阶段，主要会接触到到 <code>urllib</code>, <code>urllib2</code>, <code>requests</code>, <code>threading</code>, <code>Queue</code>, <code>BeautifulSoup</code>, <code>lxml</code> 等第三方库；</li>
<li>高级爬虫阶段，爬虫会涉及专门的爬虫框架，例如 <a href="https://scrapy.org/" rel="external nofollow noopener noreferrer" target="_blank">Scrapy</a>, <a href="https://github.com/binux/pyspider" rel="external nofollow noopener noreferrer" target="_blank">pyspider</a> 等，可以基于这些框架来构建自己的爬虫。</li>
</ul>
<h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><p>这里也不会讲解计算机网络相关知识，但是有些概念还是要明白，不然在调用方法或者接口时，不知道要传递什么参数。</p>
<ol>
<li><p>URI vs. URL vs. URN</p>
<ul>
<li>URI 是以一种抽象的，高层次概念定义统一资源标识，而 URL 和 URN 则是具体的资源标识的方式；</li>
<li>URI 是个纯粹的语法结构，包含用来指定 Web 资源的字符串的各种组成部分。URL 和 URN 都是 URI 的特例，它包含了用于定位 Web 资源的足够信息；</li>
<li><p>URI 类不包含任何用于访问资源的方法，它的唯一作用就是解析，URL 可以打开一个到达资源的流。</p>
<p>关于这三者的定义，<a href="http://www.ietf.org/rfc/rfc3986.txt" rel="external nofollow noopener noreferrer" target="_blank">RFC 3986</a> 有提到，有兴趣可以去读一下，也可以看看 Stackoverflow 上的讨论：<a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn/1984225" rel="external nofollow noopener noreferrer" target="_blank">What is the difference between a URI, a URL and a URN?</a> </p>
<p>举例如下：</p>
<p>URI: scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]</p>
<p>URL: <a href="http://www.baidu.com" rel="external nofollow noopener noreferrer" target="_blank">http://www.baidu.com</a></p>
<p>URN: mailto:wuxiaoqiang<em>*</em>@hotmail.com</p>
<p>爬虫主要处理的是 URL.</p>
</li>
</ul>
</li>
<li><p>请求和响应</p>
<p> 这其实是 HTTP 协议里面的内容了。我们从浏览器的角度来看请求和响应，因为爬虫就是尽可能模拟浏览器的行为。</p>
<p> 这个过程简单来看，其实就是用户在地址栏输入网址之后，经过 DNS 服务器解析，找到服务器主机地址，然后向服务器发出一个请求，服务器对请求解析之后进行响应，并把响应结果发送给用户的浏览器，浏览器对返回的文件进行渲染；而对于爬虫，得到响应结果之后，重点不是对其进行渲染和展示，而是对返回的内容（例如 HTML 文档）进行分析和过滤，定位到我们需要的信息或者资源，便于下一步处理，这个过程，我们并不在意网页内容的展现。</p>
<p> 这里只是在概念上建立一个认知雏形，具体内容在后面遇到的时候会再讨论。</p>
</li>
</ol>
<h2 id="High-一下"><a href="#High-一下" class="headerlink" title="High 一下"></a>High 一下</h2><p>扯了这么一堆，还是没见到爬虫的影子，那就上一条爬虫吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"> </div><div class="line">resopnse = urllib2.urlopen(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="keyword">print</span> content.read()</div></pre></td></tr></table></figure>
<p>三行就写好了一条最简单的爬虫，姑且称之为“雏形爬虫”，是不是很简单 … 保存以上代码，或者直接在命令行输入以上代码，你会得到类似如下结果：</p>
<p><img src="http://i.imgur.com/ml7gVup.png" alt="雏形爬虫执行结果"></p>
<p>这就是爬虫眼里“看到”的东西了，通常下一步要做的事就是从这个结果中分析、过滤出我们想要的信息。</p>
<h2 id="雏形爬虫分析"><a href="#雏形爬虫分析" class="headerlink" title="雏形爬虫分析"></a>雏形爬虫分析</h2><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>雏形爬虫核心代码涉及两个方法，库 <code>urllib2</code> 里面的 <code>urlopen()</code> 和 <code>read()</code>. 首先看看 <code>urlopen()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">urlopen(url, </div><div class="line">	data=<span class="keyword">None</span>, </div><div class="line">	timeout=socket._GLOBAL_DEFAULT_TIMEOUT, </div><div class="line">	cafile=<span class="keyword">None</span>, </div><div class="line">	capath=<span class="keyword">None</span>, </div><div class="line">	cadefault=<span class="keyword">False</span>, </div><div class="line">	context=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>这个方法有很多参数，但是我们通常比较关心的是前三个。在雏形爬虫中，我们向 <code>urlopen()</code> 方法传递了一个参数 <code>url</code>，这个地址指向百度首页，其他参数默认。调用这个方法后，返回的信息保存在 response 中，再调用 <code>read()</code> 方法便可以获得爬取的内容。</p>
<h3 id="一点延伸"><a href="#一点延伸" class="headerlink" title="一点延伸"></a>一点延伸</h3><p>雏形爬虫虽然简单，但是理解起来可能不是很直观，你可能会问：我们看到 response, 但似乎没有 request 啊，我要更改请求的头部信息怎么办 … </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p>这是爬虫比较推荐的写法，看上去结构清晰，更重要的是发送请求的时候，往往还需要带上一些参数，这时候就可以通过构造 Request 对象来填充数据，然后把 request 传递给 <code>urlopen()</code> 方法，返回 response. 看看 Request 的构造函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">urllib2.Request(url, </div><div class="line">	data=<span class="keyword">None</span>, </div><div class="line">	headers=&#123;&#125;, </div><div class="line">	origin_req_host=<span class="keyword">None</span>, </div><div class="line">	unverifiable=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<h3 id="GET-vs-POST"><a href="#GET-vs-POST" class="headerlink" title="GET vs. POST"></a>GET vs. POST</h3><p>默认情况下，我们调用 <code>urlopen()</code> 方法或者构造 Request 对象的时候，没有提供 data 参数，这时候发出的请求是 GET，当我们提供了 data 参数时，发出的请求就是 POST 了。从爬虫的角度来看，GET 和 POST 的区别在于，GET 是单纯的获取数据，而 POST 是在发送请求的时候还要顺带发出数据，典型的场景是模拟登录。当然，GET 和 POST 的区别不仅限于此：</p>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求；</li>
<li>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以；</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置；</li>
<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式；</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留；</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有；</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制；</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息；</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
</ul>
<p>以上信息来自 W3School.</p>
<p>基于以上的分析，我们可以分别通过填充 data 来构造 GET 和 POST 请求：</p>
<p>GET 请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">values = &#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"username"</span></div><div class="line">values[<span class="string">'password'</span>] = <span class="string">"password"</span></div><div class="line"></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></div><div class="line">geturl = url + <span class="string">"?"</span> + data</div><div class="line"></div><div class="line">request = urllib2.Request(geturl)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"></div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p>POST 请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">values = &#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"username"</span></div><div class="line">values[<span class="string">'password'</span>] = <span class="string">"password"</span></div><div class="line"></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn"</span></div><div class="line"></div><div class="line">request = urllib2.Request(url, data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"></div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p>上述代码只是为了举例说明 GET 请求和 POST 请求在构造的时候的区别，在真实的模拟登录过程中，还需要设置其他参数，例如：设置 cookie 和 UserAgent 等，这个过程可以在实际登录的时候看到。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%9C%98%E8%9B%9B" rel="external nofollow noopener noreferrer" target="_blank">网络蜘蛛</a></p>
<p><a href="http://www.ietf.org/rfc/rfc3986.txt" rel="external nofollow noopener noreferrer" target="_blank">RFC 3986</a></p>
<p><a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" rel="external nofollow noopener noreferrer" target="_blank">HTTP 方法：GET 对比 POST</a></p>
<p><a href="http://cuiqingcai.com/947.html" rel="external nofollow noopener noreferrer" target="_blank">Python 爬虫入门三之 Urllib 库的基本使用</a></p>
]]></content>
    
    <summary type="html">
    
      Python 爬虫初探
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Life is short, we use Hexo</title>
    <link href="https://blog.nssimacer.tech/post/f0ab718f/"/>
    <id>https://blog.nssimacer.tech/post/f0ab718f/</id>
    <published>2016-11-30T07:33:58.000Z</published>
    <updated>2016-12-01T07:37:56.196Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;事情的起源是一时兴起，想把 Octopress 博客的搜索功能从 Google 切换到一个 js 搜索插件，折腾了几个小时，被恶心到了，虽然以前也遇到过类似的问题，这次我是真的忍不了了，花了半个小时把博客迁移到 Hexo.</p>
<a id="more"></a>
<p>&emsp;&emsp;不得不说，Octopress 比较适合有时间并且喜欢折腾的人去玩，换上 Hexo 后，感觉之前用 Octopress 简直就是在浪费生命，虽然对静态博客相关的原理和技术有了一些了解，但是我的最终目的是在自己搭建的博客上写字，实在不想被各种恶心的 bug 影响心情。Life is short, we use Hexo.</p>
<p>&emsp;&emsp;说起博客迁移，其实蛮简单的，因为 Octopress 和 Hexo 原理相似，都是生成静态文件，然后把静态文件托管到 GitHub 或者 Coding 上。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>配置 Git 环境</li>
<li>配置 node.js 环境</li>
<li>注册 GitHub 账号或者 Coding 账号</li>
<li>在 GitHub 或者 Coding 添加 SSH Key</li>
</ul>
<p>这些是折腾 Hexo 必备的了，不赘述。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在 cmd 中输入命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli </div></pre></td></tr></table></figure>
<h2 id="创建-Hexo-博客"><a href="#创建-Hexo-博客" class="headerlink" title="创建 Hexo 博客"></a>创建 Hexo 博客</h2><p>选择你要放置博客的位置，例如 <code>E:</code>, 进入 cmd, 输入命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install </div></pre></td></tr></table></figure>
<p>命令执行结束，会产生如下文件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes </div></pre></td></tr></table></figure>
<p>可以看到，这个目录结构比 Octopress 要简洁很多。</p>
<h2 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h2><p>迁移过程很简单，把以前 Octopress 的 <code>source/_post</code> 目录下的文章，全部拷贝到 Hexo 的同名目录下就可以了，以前的图片目录，也可以直接拷贝到 <code>source/images</code> 目录下。</p>
<h2 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h2><p>其实和 Octopress 比较类似，修改根目录下的 <code>_config.yml</code> 文件中的参数实现全局配置；修改 <code>themes</code> 目录下某个主题的 <code>_config.yml</code> 文件中的参数实现主题的定制，同样，主题的样式也是在对应的主题目录下去找到样式文件进行修改。</p>
<h2 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h2><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>进入博客目录，在 cmd 输入命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [post] <span class="string">"title"</span></div></pre></td></tr></table></figure>
<p>这条命令会在你的博客目录的 <code>source/_posts</code> 下生成一个 <code>:year-:month-:day-:title.markdown</code> 的文件，这个文件名可以在 根目录下的 <code>_config.yml</code> 文件中配置 <code>new_post_name</code> 来修改。然后用编辑器打开就可以编辑文章了。</p>
<h3 id="生成、预览和部署博客"><a href="#生成、预览和部署博客" class="headerlink" title="生成、预览和部署博客"></a>生成、预览和部署博客</h3><p>文章编辑好之后，运行生成、预览和部署命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div></pre></td></tr></table></figure>
<p>生成之后，可以先在本地进行预览</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s   // 运行服务器</div></pre></td></tr></table></figure>
<p>最后进行部署</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>预览不是必须的，这些步骤可以合并，例如</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g  // 生成和预览</div><div class="line">hexo d -g  // 生成和部署</div></pre></td></tr></table></figure>
<p>上述其实是 Hexo 提供的简化命令，对应于</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g = hexo generate  // 生成</div><div class="line">hexo d = hexo deploy    // 部署</div><div class="line">hexo s = hexo server    // 运行服务器</div></pre></td></tr></table></figure>
<h3 id="博客托管"><a href="#博客托管" class="headerlink" title="博客托管"></a>博客托管</h3><p>前提是按照要求在 GitHub 或者 Coding 建立了相应的 Pages 项目，添加了 SSH Key, 然后修改根目录下的 <code>_config.yml</code> 文件中的参数</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: </div><div class="line">    github: git@github.com:username/username.github.io.git,master</div><div class="line">    coding: git@git.coding.net:username/username.git,coding-pages</div></pre></td></tr></table></figure>
<p>就可以在部署的时候将 Hexo 博客静态文件同时托管在 GitHub 和 Coding 上了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上手 Hexo 后，感觉比 Octopress 效率高很多，主题好看，可定制性强，修改起来也方便，最重要的是 Octopress 基于 ruby，而 Hexo 基于 node.js, 感觉后者在生成/部署的时候快了很多。</p>
<p>暂时就折腾这么多 ¬_¬</p>
]]></content>
    
    <summary type="html">
    
      把博客从 Octopress 迁移到 Hexo
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.nssimacer.tech/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.nssimacer.tech/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Windows 环境的 Spark 单机配置</title>
    <link href="https://blog.nssimacer.tech/post/48d5fd6a/"/>
    <id>https://blog.nssimacer.tech/post/48d5fd6a/</id>
    <published>2016-11-12T02:53:59.000Z</published>
    <updated>2016-12-01T07:37:56.192Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;尝试在 Windows 环境配置单机版本的 <a href="https://spark.apache.org/" rel="external nofollow noopener noreferrer" target="_blank">Spark</a>, 过程还是比较简单的，记录如下。</p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>OS: Windows 10 Pro 64 bit;</li>
<li>Java: 1.8.073 64 bit;</li>
<li>Python: 2.7.10 32 bit;</li>
</ul>
<h2 id="安装-Spark"><a href="#安装-Spark" class="headerlink" title="安装 Spark"></a>安装 Spark</h2><ol>
<li>安装 JDK, 如果已经安装 JDK, 这一步可以略过。去 Oracle 官网下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html" rel="external nofollow noopener noreferrer" target="_blank">JDK</a>, 安装过程默认即可，安装结束后，新建环境变量 <code>JAVA_HOME</code>, 指向 JDK 安装路径，如果安装的时候选择默认路径，则为 <code>C:\Program Files\Java\jdk1.8.0_51</code>, 然后将 <code>%JAVA_HOME%\bin</code> 添加到系统环境变量 PATH 中。</li>
<li>去 Spark 官网下载 <a href="https://spark.apache.org/" rel="external nofollow noopener noreferrer" target="_blank">Spark</a>, 目前能下载的最新版本为 <a href="http://d3kbcqa49mib13.cloudfront.net/spark-2.0.1-bin-hadoop2.7.tgz" rel="external nofollow noopener noreferrer" target="_blank">spark-2.0.1-bin-hadoop2.7</a>.</li>
<li>解压，假设解压后目录结构为 <code>E:\spark-2.0.1-bin-hadoop2.7</code>. 新建 SPARK_HOME 环境变量，指向 <code>E:\spark-2.0.1-bin-hadoop2.7</code>, 同时将 <code>%SPARK_HOME%\bin</code> 添加到系统环境变量 PATH 变量中。</li>
<li>Spark 基于 Hadoop, 所以将 Hadoop 也一并配置，过程差不多。</li>
<li>去 Hadoop 官网下载 <a href="https://hadoop.apache.org/releases.html" rel="external nofollow noopener noreferrer" target="_blank">Hadoop</a>, 目前能下载的最新稳定版本为 <a href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz" rel="external nofollow noopener noreferrer" target="_blank">hadoop-2.7.3</a>.</li>
<li>解压，假设解压后目录结构为 <code>E:\hadoop-2.7.3</code>. 新建 HADOOP_HOME 环境变量，指向 <code>E:\hadoop-2.7.3</code>, 同时将 <code>%HADOOP_HOME%\bin</code> 添加到系统环境变量 PATH 变量中。</li>
<li>验证是否安装成功：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E:\ </div><div class="line">cd E:\spark-<span class="number">2.0</span>.<span class="number">1</span>-bin-hadoop2.<span class="number">7</span>\bin</div><div class="line">spark-shell </div></pre></td></tr></table></figure>
<p>你将看到类似如下输出：</p>
<p><img src="http://i.imgur.com/FipX7MH.png" alt="Spark-Shell"></p>
<h2 id="Spark-交互配置"><a href="#Spark-交互配置" class="headerlink" title="Spark 交互配置"></a>Spark 交互配置</h2><p>Spark 启动并运行后，可以用 Spark shell 连接到 Spark 引擎进行交互式数据分析。Spark shell 支持 Scala 和 Python 两种语言。Java 不支持交互式的 Shell，因此这一功能暂未在 Java 语言中实现。</p>
<p>使用 spark-shell.cmd 运行 Scala 版本的 Spark Shell，如果想要通过 Python 与 Spark 交互，还需要进行一些简单的配置。</p>
<ol>
<li>去 Python 官网下载 <a href="https://www.python.org/" rel="external nofollow noopener noreferrer" target="_blank">Python</a>, 最新的 Python 3.5.2 和 Python 2.7.12 都行。</li>
<li>安装 Python, 默认安装即可，将 <code>C:\Python27</code> 和 <code>C:\Python27\Scripts</code> 添加到系统变量 PATH 中。</li>
<li>现在可以在 cmd 命令行下运行 <code>pyspark</code>, 输出类似如下：</li>
</ol>
<p><img src="http://i.imgur.com/Kd9928T.png" alt="Python-Spark"></p>
<h2 id="Spark-Web-控制台"><a href="#Spark-Web-控制台" class="headerlink" title="Spark Web 控制台"></a>Spark Web 控制台</h2><p>首先通过 Spark-Shell 或者 Python-Spark 启动 Spark 后，在浏览器中输入 <code>http://localhost:4040</code>, 可以查看 Spark 的作业结果和其他的统计数据：</p>
<p><img src="http://i.imgur.com/IoRhJ9U.png" alt="Web-UI"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>完成单机配置后，就可以在在 Java / Scala / Python / R / Clojure 等应用中调用 Spark API 进行数据分析，当然不同开发环境可能还需要进一步配置 o(<em>￣▽￣</em>)ブ</p>
]]></content>
    
    <summary type="html">
    
      基于 Windows 环境的 Spark 单机配置
    
    </summary>
    
      <category term="Spark" scheme="https://blog.nssimacer.tech/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://blog.nssimacer.tech/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>The end is always near - 2017 校招不完全记录</title>
    <link href="https://blog.nssimacer.tech/post/4bc356d2/"/>
    <id>https://blog.nssimacer.tech/post/4bc356d2/</id>
    <published>2016-11-03T02:32:20.000Z</published>
    <updated>2017-03-23T02:20:35.501Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;经过将近 3 个月的准备和挣扎，截止目前，校招算是告一段落，这篇博客主要目的是记录校招的面试经历和参加校招的一些感受。不得不说，参加校招也是一个磨练心智的过程，从校招刚开始时投简历石沉大海的无助，到陆陆续续参加面试的紧张，再到后来经历一些面试之后的从容，到拿下若干 offer 的喜悦，再到 offer 选择时候的纠结，最后归于平静。</p>
<a id="more"></a>
<h2 id="面试经历"><a href="#面试经历" class="headerlink" title="面试经历"></a>面试经历</h2><p>校招期间，主要参加了这些公司的面试：网易有道(实习)，华为，腾讯(内推，校招)，小米，京东，百度，滴滴，360，今日头条，美团，WAP 以及若干 startup.</p>
<h3 id="网易有道-INTERNSHIP-OFFERED"><a href="#网易有道-INTERNSHIP-OFFERED" class="headerlink" title="网易有道(INTERNSHIP OFFERED)"></a>网易有道(INTERNSHIP OFFERED)</h3><p>早就听说有道极客氛围很浓，进了有道，比较好翻墙，早年从有道跳到 Google, Facebook 的很多，现在可能少一些了。3 月份投的有道实习，一直没有音信，没有收到笔试通知，官网状态也没变过，直到 8 月份，突然收到电话问还考不考虑找实习，抱着试试看的态度，参加了有道安排的线上笔试，其实那个时候，有道校招内推笔试也已经开始了。笔试之后，很快收到面试邀请，果断前往。</p>
<h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>聊项目，Lucene 检索，SNA 平台，文本自动分类，都有讲到；</li>
<li>做题：设计一个 push()，pop() 和 getMin() 都是 O(1) 时间复杂度的 Stack；</li>
<li>Concurrent 包下面的内容，ConcurrentHashMap vs. HashMap，实现原理，为什么 HashMap 在多线程环境需要同步；</li>
<li>MySQL 数据库索引，MyISAM 和 InnoDB 引擎有啥不同，int(8) 和 int(10) 的区别是什么；</li>
<li>做题：打印螺旋矩阵；</li>
<li>缓存设计，Redis 怎么用，性能如何，有什么坑；</li>
<li>实习时间，实习内容之类的。</li>
</ol>
<h4 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h4><ol>
<li>自我介绍；</li>
<li>聊论文，具体实现过程，原理，效果如何，发展趋势是什么；</li>
<li>聊项目，Lucene 全文检索，NLP，认为在用 Lucene 做检索的时候可以考虑加入语义分析，讨论百度知道是如何实现的；</li>
<li>做题：根据树的中序遍历和后序遍历推导出树的前序遍历结果；</li>
<li>实习时间，内容之类，有啥问题。</li>
</ol>
<hr>
<p>这算是校招期间参加的第一家大公司的 onsite 了，整个过程感觉还是比较轻松的，我觉得可能因为是实习面试，面试官问得稍微简单点吧。第二天上午收到 HR 电话，说面试通过，商量实习时间，得知实习转正机会比较小，实习对校招也没有类似绿色通道的优惠，最后没谈拢。</p>
<h3 id="腾讯-一面-GG"><a href="#腾讯-一面-GG" class="headerlink" title="腾讯(一面 GG)"></a>腾讯(一面 GG)</h3><p>搞不清楚这次面试是内推的还是 TST 计划，只知道面试官是 QQ 浏览器的，坐标深圳，电话面试。</p>
<h4 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>项目，重点介绍项目的 Lucene 实现的自动问答系统，Lucene 全文检索的完整流程，Lucene 索引结构，倒排索引，向量相似度计算；</li>
<li>由 Lucene 索引结构将话题引到 MySQL 索引，介绍 MySQL 索引，B+ 树，红黑树，HashMap 有什么不同，有什么应用；</li>
<li>操作系统，由哪几部分组成，进程结构，Java 多线程与操作系统线程的关系（Java 线程的实现方式，事后我觉得这个问题我可能理解错了，面试官可能想问的是 Java 多线程的实现方式，我答成了 Java 线程在操作系统层面的实现方式）；</li>
<li>Java 虚拟机，垃圾回收算法；</li>
<li>计算机网络，TIME_WAIT 的作用；</li>
<li>概率题：一副扑克 54 张牌，现在分成 3 份，每份 18 张，问大小王出现在同一份中的概率是多少；</li>
<li>有啥问题要问。</li>
</ol>
<hr>
<p>这是校招前期收到的第一个电话面试，整个过程感觉一般般，没有亮点，进程结构和 TIME_WAIT 没有答好，最后 GG, 其实也在意料之中。</p>
<h3 id="华为-OFFERED"><a href="#华为-OFFERED" class="headerlink" title="华为(OFFERED)"></a>华为(OFFERED)</h3><p>应该是校招期间经历的最轻松的面试了。</p>
<h4 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h4><p>面试官是一位中年大叔，纯聊项目，感觉聊得还挺愉快的，时不时也问一些基础知识，比如 TCP/IP，三次握手/四次挥手，Django 啥的。</p>
<h4 id="二面-·-综合面"><a href="#二面-·-综合面" class="headerlink" title="二面 · 综合面"></a>二面 · 综合面</h4><p>面试官是北京区的 HR 老大，聊了很多，基本是把简历过了一遍，包括讲项目，另外问了一些个人的基本情况。</p>
<hr>
<p>同一天去面试的小伙伴，两面也就聊了一个小时，我聊了两个多小时，不晓得是什么原因。前阵子签约，得知面试结果还是挺不错的，AA，然而薪资比较感人 … 不过话说回来，签约的时候有专车接送，带领参观华为北京研究所展厅，感觉华为确实还是挺 NB 的。</p>
<h3 id="腾讯-二面-GG"><a href="#腾讯-二面-GG" class="headerlink" title="腾讯(二面 GG)"></a>腾讯(二面 GG)</h3><p>没错，又是腾讯，不过这次是校招了。一面，现场等了一个多小时才面上；二面等了十几分钟的样子。</p>
<h4 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h4><ol>
<li>C++ 重载和重写的区别；</li>
<li>C++ 复制构造函数；</li>
<li>求解链表交点，求解带环链表交点；</li>
<li>项目介绍；</li>
<li>工作地点啥的。</li>
</ol>
<h4 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h4><ol>
<li>你觉得你一面表现如何(懵逼)；</li>
<li>介绍项目；</li>
<li>Java 和 Python 有啥区别；</li>
<li>Socket 编程，手写 Client 和多线程 Server.</li>
</ol>
<hr>
<p>不得不说这是参加校招以来遇到的最难忘的一次面试经历。一面的时候，面试官问我主要用什么语言，我说 Java 和 Python 用得多一些，然而面试官在我几次强调我主要用 Java 的情况下，面试官还是问了几个 C++ 相关的问题，我不懂 C++ 不敢瞎说，只能从 Java 语言的角度去回答；面试官出题，我讲思路，面试官基本不鸟；面试期间，面试官跟同事打电话，我还没面完，就把下一个面试者喊进来站我旁边等我 … 我觉得这场面试必须 GG 了。</p>
<p>燃鹅，回去之后居然收到了二面通知！让我一度怀疑一面是压力面试 … 再燃鹅，二面一上来，面试官问我觉得一面表现如何，我觉得这绝壁是个 flag，凶多吉少。</p>
<p>总之，这次面试经历，腾讯给我留下了深刻的印象。<strong>谁他妈再跟我装逼说语言只是工具，我保证不打死他。</strong></p>
<h3 id="小米-OFFERED"><a href="#小米-OFFERED" class="headerlink" title="小米(OFFERED)"></a>小米(OFFERED)</h3><p>小米是内推途径，总共三面，一口气完成，强度还是蛮大的。</p>
<h4 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>聊论文 / 项目，具体是介绍论文的思路，解决的问题，使用的方法等；</li>
<li>某海量用户网站，用户拥有积分，积分可能会在使用过程中随时更新。现在要为该网站设计一种算法，在每次用户登录时显示其当前积分排名。用户最大规模为 2 亿；积分为非负整数，且小于 100 万；</li>
<li>算法题：求 1-N 中数字 1 的个数。</li>
</ol>
<h4 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h4><ol>
<li>List 接口的数据遍历，主要考察面向对象的编程思想；</li>
<li>加权连通图最小生成树；</li>
<li>Union-Find 算法；</li>
<li>算法题：最大栈；</li>
<li>算法题：数组第 K 小值；</li>
<li>算法题：判断一棵二叉树是否是 BST。</li>
</ol>
<h4 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h4><ol>
<li>介绍项目；</li>
<li>算法题：是否存在二叉树根节点到叶子节点的和等于给定的值；</li>
<li>算法题：求第 K 个丑数；</li>
<li>有啥问题要问的。</li>
</ol>
<hr>
<p>一面发挥得很一般，在讨论海量积分排名那个开放性问题的时候，最后卡在了“如何才能使得每次查询时 load 上来的数据最小”这个点上，算法题也没答好，不过面试官很 nice，面试过程一直都是在引导，很有耐心；二面、三面问得比较广，面试官也都很 nice，不会的地方不会为难，卡住了会一步一步引导往下思考。</p>
<p>总的来讲，小米的面试经历算是比较愉快的，虽然强度比较大。</p>
<h3 id="京东-二面-GG"><a href="#京东-二面-GG" class="headerlink" title="京东(二面 GG)"></a>京东(二面 GG)</h3><p>京东在内推的时候，发了大把 offer，不乏各种 special offer，那时候投晚了一点，错失机会，只能参加校招面试了。</p>
<h4 id="一面-5"><a href="#一面-5" class="headerlink" title="一面"></a>一面</h4><ol>
<li>聊项目；</li>
<li>讲论文；</li>
<li>算法题：判断一个数是不是丑数；</li>
<li>算法题：打印树的每一层最右侧节点；</li>
<li>闲聊。</li>
</ol>
<h4 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h4><ol>
<li>聊项目；</li>
<li>HashMap 的原理，实现简单的 get/put 操作；</li>
<li>算法题：Decode Ways；</li>
<li>闲聊。</li>
</ol>
<hr>
<p>一面，头一回在技术面遇到女面试官，面试官挺 nice，因为他们面试是掐着时间的，到了 30 分钟准时结束，做题和项目聊得还是比较愉快的，剩下几分钟，面试官说咱们随便聊聊简单了解一下吧。</p>
<p>二面，看着像个部门 boss，轮子哥那种(体型)，感觉面试画风跟其他同学不太一样，据说他们大多都是聊项目，水水就过去了，算法题没写好，预感 GG.</p>
<h3 id="百度-一面-GG"><a href="#百度-一面-GG" class="headerlink" title="百度(一面 GG)"></a>百度(一面 GG)</h3><p>内推的时候没投，因为基本没看到要 Java 的，不敢投。面试那天，记得我们这边一大群人吃了午饭过去的，按时间到了百度大厦，让在门口等着，过了一会儿开门了，进去之后排队签到，再排队，场面有点混乱。</p>
<h4 id="一面-6"><a href="#一面-6" class="headerlink" title="一面"></a>一面</h4><ol>
<li>Java 中 int 大小，范围数量级；</li>
<li>数组和 ArrayList 的区别；</li>
<li>多线程，锁；</li>
<li>信号量，使用场景；</li>
<li>GC 过程，FullGC 过程；</li>
<li>继承和多态的区别；</li>
<li>AOP 概念，应用；</li>
<li>设计模式 Adapter；</li>
<li>IoC 原理，缺点；</li>
<li>正则表达式，ab*c 匹配的字符串及其状态机；</li>
<li>数据库，两次相同的 select 操作，期间没有发生增，删，改操作，返回的结果是否相同；</li>
<li>介绍自己理解的编程规范；</li>
<li>面向接口编程的缺点；</li>
<li>Scala，函数式编程；</li>
<li>Ruby；</li>
</ol>
<hr>
<p>问得很广，收获还是挺大的。面试官对我的评价是：缺乏工程经验。一起去的同学，只有我一个挂在一面，其他的后来基本都拿到 offer, WTF! 讲真，一面 GG 是万万没想到的。</p>
<h3 id="滴滴-REJECTED-IN-SILENCE"><a href="#滴滴-REJECTED-IN-SILENCE" class="headerlink" title="滴滴(REJECTED IN SILENCE)"></a>滴滴(REJECTED IN SILENCE)</h3><p>众所周知，滴滴今年(以往似乎也是)的校招组织得比较混乱，凌晨一点半接到电话通知面试的感觉实在酸爽。有幸在第一天面上一面，第二天又被室友拉过去，一口气面完剩下的三面，大家都说今年能面上滴滴，还能面上四面的，都是人生赢家 … </p>
<h4 id="一面-7"><a href="#一面-7" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>聊项目；</li>
<li>Java 访问修饰符权限的区别；</li>
<li>Java 垃圾回收，内存管理；</li>
<li>手写冒泡排序和单例模式；</li>
<li>第一次去某个地方，如何估计出这个地方的车流量。</li>
</ol>
<h4 id="二面-4"><a href="#二面-4" class="headerlink" title="二面"></a>二面</h4><ol>
<li>Java 内存模型；</li>
<li>Java 垃圾回收；</li>
<li>Java 反射；</li>
<li>SSH 框架；</li>
<li>红黑树最左节点和最右节点交换；</li>
<li>对滴滴了解多少，技术和产品。</li>
</ol>
<h4 id="三面-·-boss-面"><a href="#三面-·-boss-面" class="headerlink" title="三面 · boss 面"></a>三面 · boss 面</h4><ol>
<li>介绍项目，深入细节探讨；</li>
<li>Java 反射，缺点；</li>
<li>Python 基础，Flask 原理；</li>
<li>最有成就的一个项目，讲论文；</li>
<li>闲聊。</li>
</ol>
<h4 id="四面-·-HR-面"><a href="#四面-·-HR-面" class="headerlink" title="四面 · HR 面"></a>四面 · HR 面</h4><ol>
<li>聊人生，有啥 offer，职业规划；</li>
<li>月饼事件。</li>
</ol>
<hr>
<p>本以为这个 offer 应该没啥大问题了，没想到紧接着各地出台了网约车新政，不知道是不是受这个影响，反正大家感觉最后收到 offer 的并不多，没收到 offer 也没其他消息的，应该就是 GG 了。</p>
<p>不过还是感谢滴滴能给这个机会，跟面试官交流收获挺大，尤其是 boss 面。</p>
<h3 id="360-OFFERED"><a href="#360-OFFERED" class="headerlink" title="360(OFFERED)"></a>360(OFFERED)</h3><p>对 360 校招印象还是很不错的，面试前有专门的电话提醒面试安排，面试现场也很有秩序，等待的时间还好，三面之间大概等了一个小时。</p>
<h4 id="一面-8"><a href="#一面-8" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>volatile 关键字的含义，原理；</li>
<li>异步并发，Future 用法；</li>
<li>JUC 下面的内容，锁，CountdownLatch，CyclicBarrier，实现原理；</li>
<li>线程池；</li>
<li>HashMap 原理；</li>
<li>递归可能造成什么问题，为什么，怎么解决；</li>
<li>介绍 Java 内存模型；</li>
<li>介绍垃圾收集器，CMS 和 G1 的区别，G1 的优点；</li>
<li>介绍 Java 的四种引用类型以及应用场景；</li>
<li>介绍对 Redis 的了解；</li>
<li>介绍论文；</li>
<li>动态代理的原理，JDK 实现和 CGLib 实现的区别；</li>
<li>SpringMVC 的原理。</li>
</ol>
<h4 id="二面-5"><a href="#二面-5" class="headerlink" title="二面"></a>二面</h4><ol>
<li>聊项目；</li>
<li>手写快排，如何改进；</li>
<li>最大的缺点；</li>
<li>兴趣爱好。</li>
</ol>
<h4 id="三面-·-综合面"><a href="#三面-·-综合面" class="headerlink" title="三面 · 综合面"></a>三面 · 综合面</h4><ol>
<li>聊人生，聊规划，为啥想来 360；</li>
<li>聊兴趣爱好。</li>
</ol>
<hr>
<p>两位技术面试官很 nice，一面面试官也是全程引导思考的那种，不会刻意刁难人。</p>
<p>二面的时候，我有种不祥的预感，因为面试官一直在反驳我，让我感觉亚历山大，可能是压力面吧，之前没经历过，被反驳的时候，总是想着怎么去解释，我觉得这点做得不好，应该在整个面试过程保持清醒，稍微想明白了再回答问题，不然很容易被面试官挑出漏洞，然后心里越来越慌，越来越紧张。</p>
<p>话说 360 给 offer 太爽快了，这点要赞！</p>
<h3 id="今日头条-一面-GG"><a href="#今日头条-一面-GG" class="headerlink" title="今日头条(一面 GG)"></a>今日头条(一面 GG)</h3><p>面试之前，有耳闻难度很大，硬着头皮去试试。</p>
<h4 id="一面-9"><a href="#一面-9" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>聊项目；</li>
<li>JVM, HashMap 原理；</li>
<li>Trie-Tree 原理及其应用；</li>
<li>算法题：类似 Path Sum 的问题;</li>
<li>算法题：合并数组。</li>
</ol>
<hr>
<p>第一个算法题，感觉没搞明白面试官的意图，就开始动手写，大失误。面完之后感觉应该是要 GG 了。</p>
<h3 id="美团-一面-GG"><a href="#美团-一面-GG" class="headerlink" title="美团(一面 GG)"></a>美团(一面 GG)</h3><p>面完腾讯和头条之后，已经不太想再面试了，后来收到美团的通知，还是去面了一下。</p>
<h4 id="一面-10"><a href="#一面-10" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>聊项目；</li>
<li>IP 头组成；</li>
<li>synchronized 原理；</li>
<li>HashMap vs. Hashtable；</li>
<li>算法题：Min Stack；</li>
<li>算法题：Power；</li>
<li>综合题：两个数据流，有一个共同的字段 ID，如何将两个数据流的相同 ID 的数据合并到一起；</li>
<li>数据库，Redis，缓存；</li>
<li>聊论文；</li>
<li>闲聊。</li>
</ol>
<hr>
<p>面到最后，有了这么多场面试经历，其实我自己有种错觉，一面应该还是可以过的，没想到 … 面试官直接让我回去，我还特意问了是去等候区还是啥，她说回学校去吧 … </p>
<h3 id="WAP-INTERNSHIP-FAILED"><a href="#WAP-INTERNSHIP-FAILED" class="headerlink" title="WAP(INTERNSHIP FAILED)"></a>WAP(INTERNSHIP FAILED)</h3><p>WAP 600 万日元的年薪还是挺有诱惑力的，经室友内推，直接进入 Live Coding 阶段。</p>
<h4 id="Live-Coding"><a href="#Live-Coding" class="headerlink" title="Live Coding"></a>Live Coding</h4><p>Live Coding 其实就是写题，算法题，据说大多是 LeetCode，剑指 Offer 上的。现场签到之后，等了大概 10 分钟，开始面试，总共 45 分钟。</p>
<p>先是自我介绍，然后面试官从桌上一叠试题中抽了一道让我写，类似于后缀表达式求值，简单交流了一下思路，开始写代码，代码很快就写完了，然后开始跑测试用例，很不幸，有 bug，然后开始 debug，其实这个时候还是蛮紧张的，据说通常要过 2-3 道题才能通过 … 消灭了第一个 bug，还有一个，那个 bug 比较诡异，单步调试正常，直接运行就结果不符合预期，时间快到了，感觉没戏了，45 分钟，一道题还没写完，面试官说：再给你最后 5 分钟。继续调试，最后一刻，跑通了前面所有 case，还剩最后一个 case，面试官说：如果你过了这个 case，我让你通过这次面试。最后一刻，最后那个 case 过了。</p>
<h4 id="Internship"><a href="#Internship" class="headerlink" title="Internship"></a>Internship</h4><p>过了 Live Coding，马上就迎来为期 5 天的 Internship，在此之前，还有一个 Document Task，这个是重点。</p>
<ol>
<li>写 catalog；</li>
<li>Skype Review；</li>
<li>Internship 流程大致如下：<ol>
<li>欢迎仪式，项目介绍，接着修改 catalog，这天结束的时候提交 catalog；</li>
<li>Catalog Review；</li>
<li>代码实现一些 killer feature，final submission；</li>
<li>最终作品演示，填写 Questionnaire，闭幕仪式，VP Session 以及晚宴；</li>
<li>第 4 天待定的，在第 5 天需要再次演示；</li>
<li>Day 1-4 都需要写一份 daily report；</li>
</ol>
</li>
</ol>
<hr>
<p>WAP 比较看重的是一个人的业务分析能力。按照工程师的评价标准，并不要求你一开始就写出非常亮眼的 catalog (比如说提出很多有新意的、非常实用的功能)，而是希望看到再对你进行 review 之后，能够根据 feedback 进行改进，然后在实现的时候，至少实现一个 killer feature，当然，daily report 也要认真对待。</p>
<h3 id="百度-SPECIAL-OFFER"><a href="#百度-SPECIAL-OFFER" class="headerlink" title="百度(SPECIAL OFFER)"></a>百度(SPECIAL OFFER)</h3><p>是的，又是百度。其实之前已经讨论得差不多，也咨询了多方面的建议，就准备拿到三方之后，在小米和 360 两家选一个签了。突然收到面试邀约邮件，显示是我很早投递的网页搜索部门的邮件的回复，回复来自系统部，简单沟通了一下，很快就安排了面试，已经一个多月没有面试，抱着试试看的心态，果断参加。</p>
<h4 id="一面-11"><a href="#一面-11" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>介绍项目，聊论文；</li>
<li>Hashset, HashMap 原理；</li>
<li>多线程实现方式；</li>
<li>Callable vs. Future；</li>
<li>线程池的原理和作用；</li>
<li>JVM 运行时内存分布；</li>
<li>NIO vs. BIO；</li>
<li>RPC 原理；</li>
<li>Python 单引号字符串 vs. 双引号字符串；</li>
<li>协程 vs. 线程 vs. 进程；</li>
<li>MySQL 索引原理；</li>
<li>MYISAM vs. InnoDB；</li>
<li>B+/B-树，红黑树基本结构，复杂度，树结构在工程中的应用(搜索)；</li>
<li>跳跃表；</li>
<li>算法题：归并排序；</li>
<li>给一个表，写 SQL 脚本完成指定需求；</li>
<li>负载均衡调度算法；</li>
<li>Lucene vs. ElasticSearch；</li>
<li>提问环节，闲聊。</li>
</ol>
<h4 id="二面-6"><a href="#二面-6" class="headerlink" title="二面"></a>二面</h4><ol>
<li>介绍项目；</li>
<li>MapReduce 过程，combine 的作用，是否必须；</li>
<li>项目引申，如何找出社交网络中相互关注的节点；</li>
<li>单例模式，策略模式，观察者模式；</li>
<li>MySQL 索引结构；</li>
<li>MYISAM vs. InnoDB；</li>
<li>聚集索引 vs. 非聚集索引；</li>
<li>Redis 持久化的方式；</li>
<li>RDB vs. AOF；</li>
<li>提问环节，闲聊。</li>
</ol>
<h4 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h4><ol>
<li>自我介绍；</li>
<li>Team 介绍；</li>
<li>闲聊，提问环节；</li>
<li>频繁项集发现，Apriori 算法(忘得差不多了)；</li>
<li>系统设计中，如何设计和管理异常；</li>
<li>算法题：已知函数 $f(n)$,</li>
</ol>
<p>$$<br>\begin{equation}<br>f(n) = \begin{cases}<br>    0, p \<br>    1, 1 - p<br>\end{cases}<br>\end{equation}<br>$$</p>
<p>&emsp;&emsp;如何利用 $f(n)$ 构造 $F(n)$,</p>
<p>$$<br>\begin{equation}<br>F(n) = \begin{cases}<br>    0, 0.5 \<br>    1, 0.5<br>\end{cases}<br>\end{equation}<br>$$</p>
<h4 id="四面"><a href="#四面" class="headerlink" title="四面"></a>四面</h4><p>三面之后，面试官说还需要找个同学跟我聊聊，我以为还是技术面，就把前面几轮没有答好的问题复习了一遍。约好的三点，到三点半还没接到电话，有点慌，后来电话来了，过程不表，就是对着简历过了一下，过程大概 17 分钟。</p>
<hr>
<p>能被百度“捞”起来，是蛮惊喜的一件事，之前一次面试由于缺乏工程经验，遗憾无缘 offer. 几轮面试下来，感觉面试官都很 nice, 如果以后能和他们共事，应该会是比较愉快的。</p>
<h3 id="腾讯-REJECTED-IN-SILENCE"><a href="#腾讯-REJECTED-IN-SILENCE" class="headerlink" title="腾讯(REJECTED IN SILENCE)"></a>腾讯(REJECTED IN SILENCE)</h3><p>又双叒叕是腾讯，只不过这次是 OMG 了。看到 OMG 腾讯视频的补招消息，果断投；不久之后收到面试邀约，果断前往。</p>
<h4 id="一面-12"><a href="#一面-12" class="headerlink" title="一面"></a>一面</h4><ol>
<li>自我介绍；</li>
<li>项目介绍，论文介绍，研究相关；</li>
<li>MYISAM vs. InnoDB；</li>
<li>NoSQL：Redis, MongoDB 基础知识；</li>
<li>Lucene vs. ElasticSearch；</li>
<li>Linux 常用命令；</li>
<li>Python 2.x 有哪些坑(编码，GIL，垃圾回收)；</li>
<li>Python 爬虫写法；</li>
<li>如何对爬取的 HTML 进行解析(正则表达式/BeautifulSoup+LXML)，聊到 XML 的解析(XPATH)；</li>
<li>如何防止爬虫被封； </li>
<li>算法题：删除链表节点；</li>
<li>提问环节，闲聊。</li>
</ol>
<h4 id="二面-7"><a href="#二面-7" class="headerlink" title="二面"></a>二面</h4><ol>
<li>Java 中异常怎么处理，什么时候抛出，什么时候捕获；</li>
<li>JIT；</li>
<li>策略模式，观察者模式；</li>
<li>synchronized 原理，线程池介绍，引入线程池会有什么问题；</li>
<li>Redis 持久化；</li>
<li>AOF vs. RDB；</li>
<li>算法题：二叉树转双向链表；</li>
<li>智力题：给定 $a + b + c + d = 100$, 求满足 $a \leq  b \leq c \leq d$ 这一条件的 $a, b, c, d$ 序列种数；</li>
</ol>
<h4 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h4><ol>
<li>智力题：4T 的数据流，有两个分支，这两个分支的数据流中的记录存在相同的字段，如何对整个数据流在某个字段上进行统计；</li>
<li>设计题：分地区服务器，静态 CDN 分发，Nginx 代理，负载均衡相关；</li>
<li>提问环节，闲聊。</li>
</ol>
<hr>
<p>整个面试过程下来，表现得不是很好，连着面了三轮，感觉收获还是挺大的，面试主要侧重的是分析和解决实际问题的能力，二面侧重基础知识的考察。仍然感谢腾讯能给我这个机会。</p>
<h2 id="校招感受"><a href="#校招感受" class="headerlink" title="校招感受"></a>校招感受</h2><h3 id="内推阶段"><a href="#内推阶段" class="headerlink" title="内推阶段"></a>内推阶段</h3><p>内推的时候，大家几乎都是把能投的公司都投了一遍，然而收到面试邀约的寥寥无几，一度让人怀疑人生，这样下去，工作不用找了 … 现在看来，绝大多数公司只是在内推阶段打了一下广告，并没有实际动静，以某某街为代表。</p>
<h3 id="校招笔试"><a href="#校招笔试" class="headerlink" title="校招笔试"></a>校招笔试</h3><p>内推告一段落，大部分同学并没有斩获心仪的 offer，0 offer 居多。进入笔试阶段，因为笔试比较集中，有可能一天要参加好几场笔试，非常耗费精力，有时候需要做出取舍。</p>
<h3 id="校招面试"><a href="#校招面试" class="headerlink" title="校招面试"></a>校招面试</h3><p>笔试之后，陆陆续续收到面试邀约，开始慢慢从面试经历中适应校招的节奏，这个阶段比较痛苦，渐渐地明白运气和缘分在面试中不可忽视的重要性。连续几次失利，也一度怀疑人生，好在坚持下来，反思，查漏补缺，最后收了几个 offer.</p>
<h3 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h3><ul>
<li><p>有条件的话，尽量去实习，去大厂实习。几乎每一场面试，都会被面试官问到有没有实习经历，没有拿得出手的实习经历的话，就比较被动了。</p>
</li>
<li><p>简历一定要认真对待，尽量写跟岗位 match 的东西。有不下 5 位面试官跟我聊完之后，问我为啥不投算法岗，因为我简历上的项目偏算法，另一方面也可能是因为面试过程中我没有做好技能点引导导致的。</p>
</li>
<li><p>平常心。这个说起来很简单，但是要做到还是很难，以前我不相信运气这个事，直到投 paper 和参加校招。面试确实有一定的运气成分，一定程度看你和面试官是不是合拍。事到如今，不谈运气，个人更多觉得还是自己准备不够充分，经历不够丰富。</p>
</li>
</ul>
<h2 id="校招之后"><a href="#校招之后" class="headerlink" title="校招之后"></a>校招之后</h2><p>身边的小伙伴都收获了非常满意的 offer，也第一次感受到自己和周围小伙伴的差距，经过这么多次面试，也找到了自己需要加强的技能点，引导后续学习的方向。</p>
<p>定下 offer，也是时候收收心搞搞科研，水水 paper 了 b（￣▽￣）d　</p>
]]></content>
    
    <summary type="html">
    
      2017 校招小结
    
    </summary>
    
      <category term="Job" scheme="https://blog.nssimacer.tech/categories/Job/"/>
    
    
      <category term="Job" scheme="https://blog.nssimacer.tech/tags/Job/"/>
    
      <category term="Interview" scheme="https://blog.nssimacer.tech/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>将 Octopress 博客恢复到本地</title>
    <link href="https://blog.nssimacer.tech/post/59d5ae2d/"/>
    <id>https://blog.nssimacer.tech/post/59d5ae2d/</id>
    <published>2016-07-12T13:48:12.000Z</published>
    <updated>2016-12-01T07:37:56.190Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;重装了几次系统，由于近期比较忙，已经有一段时间没更新博客了，今天将博客恢复到本地，闲暇时间仍然得坚持更新。</p>
<h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>1.1. OS Platform： Windows 7 Ultimate 64 bit, Ubuntu 14.04 LTS 64 bit, Windows 10 Pro 64 bit;<br>1.2. Git: <a href="https://github.com/git-for-windows/git/releases/download/v2.9.0.windows.1/Git-2.9.0-64-bit.exe" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/git-for-windows/git/releases/download/v2.9.0.windows.1/Git-2.9.0-64-bit.exe</a>;<br>1.3. Python: <a href="https://www.python.org/ftp/python/2.7.12/python-2.7.12.msi" rel="external nofollow noopener noreferrer" target="_blank">https://www.python.org/ftp/python/2.7.12/python-2.7.12.msi</a>;<br>1.4. Ruby: <a href="http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p648-x64.exe" rel="external nofollow noopener noreferrer" target="_blank">http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p648-x64.exe</a>, Octopress 对 Ruby 有版本要求，推荐使用 2.0.0 版本;<br>1.5. DevKit: <a href="http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe" rel="external nofollow noopener noreferrer" target="_blank">http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe</a>，与 2.0.0 版本的 Ruby 对应。</p>
<a id="more"></a>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>2.1. 安装 Git<br>&emsp;&emsp;Windows 下安装 Git 很简单，一路 next 就可以了。</p>
<p>2.2. 安装 Ruby<br>&emsp;&emsp;Ruby 的安装也是一路 next 就可以，不过记得勾选“Add Ruby executables to your PATH”，将 Ruby 的执行路径加入到环境变量中，如果忘记勾选，也可以手动设置。安装完后可以在命令提示符中输入 <code>ruby --version</code> 来确认是否安装成功。</p>
<p>2.3. 安装 DevKit<br>&emsp;&emsp;DevKit 下载下来的是一个自压缩文件，我们将其解压到 D:/DevKit，有两点需要注意：<br>&emsp;&emsp;i. 解压目录中没有有中文和空格；<br>&emsp;&emsp;ii. 必须先安装 Ruby，而且 Ruby 需要用 RubyInstallser 安装。<br>&emsp;&emsp;解压 DevKit 后，在命令行输入以下命令来进行安装：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D:\ </div><div class="line">cd DevKit</div><div class="line">ruby dk.rb init </div><div class="line">ruby dk.rb install </div></pre></td></tr></table></figure>
<p>2.4. 安装 Python<br>&emsp;&emsp;安装 Python,也是一路 next 就可以，博客的代码高亮用到了 Python 的 Pygments 模块，在 Python 中安装第三方库需要使用 easy_install (或者 pip)，easy_install 会安装在 Python 安装目录的Scripts 目录中，例如我的 Python 目录是 <code>D:\Software\Python 2.7.12</code>，所以需要将 <code>D:\Software\Python 2.7.12\Scripts</code> 目录加入到环境变量中才能在命令提示符中使用 <code>easy\_install</code> 命令。在命令提示符中输入如下命令就可以安装 Pygments 了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pygments</div></pre></td></tr></table></figure>
<h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>3.1. 克隆博客源码分支</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -b source git@github.com:username/username.github.io.git octopress</div></pre></td></tr></table></figure>
<p>3.2. 初始化 Octopress 博客的 Ruby 依赖</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd octopress </div><div class="line">gem install bundler</div><div class="line">bundle install </div><div class="line">rake setup_github_pages</div></pre></td></tr></table></figure>
<p>接着输入博客仓库地址，形如：<code>git@github.com:[your username]/[your username].github.io.git</code>，或者 HTTPS 地址，形如：<code>https://github.com/[your username]/[your username].github.io.git</code></p>
<p>3.3. 克隆 git 分支</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf _deploy</div><div class="line">git clone git@github.com:username/username.github.io.git _deploy</div></pre></td></tr></table></figure>
<p>Done!</p>
<h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p>4.1. Clone 仓库遇到访问受限等问题，这时候需要配置 SSH 公钥</p>
<p>&emsp;&emsp;Windows 下打开 Git Bash，输入 <code>ssh-keygen -t rsa -C &quot;your email address&quot;</code>，方便起见，连续回车 3 次，当然也可以选择输入密码。成功之后，打开 <code>C:\Users\***\.ssh\id_rsa.pub</code> 文件，将其中的内容复制添加到 <a href="https://github.com/settings/keys" rel="external nofollow noopener noreferrer" target="_blank">SSH and GPG Keys</a>.</p>
<p>4.2. Ruby, DevKit 的版本问题</p>
<p>&emsp;&emsp;亲测使用 RubyInstaller 2.0.0-p648 和 DevKit 4.7.2 比较省事。</p>
<h3 id="附：参考文章"><a href="#附：参考文章" class="headerlink" title="附：参考文章"></a>附：参考文章</h3><p><a href="http://i.rexdf.org/blog/2014/01/29/zhong-zhuang-xi-tong-hou-hui-fu-octopress/" rel="external nofollow noopener noreferrer" target="_blank">重装系统后恢复 octopress</a></p>
<p><a href="https://help.github.com/articles/generating-an-ssh-key/" rel="external nofollow noopener noreferrer" target="_blank">Generating an SSH key</a></p>
]]></content>
    
    <summary type="html">
    
      Recover Octopress to Local
    
    </summary>
    
      <category term="Octopress" scheme="https://blog.nssimacer.tech/categories/Octopress/"/>
    
    
      <category term="Octopress" scheme="https://blog.nssimacer.tech/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 000: Read and Write Images</title>
    <link href="https://blog.nssimacer.tech/post/670cdba/"/>
    <id>https://blog.nssimacer.tech/post/670cdba/</id>
    <published>2015-04-09T06:31:54.000Z</published>
    <updated>2016-12-01T07:37:56.187Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<a href="http://opencv.org/" rel="external nofollow noopener noreferrer" target="_blank">OpenCV</a> 是计算机视觉领域一个非常强大的第三方库，全称 Open Source Computer Vision Library。OpenCV 不仅提供了对图像的基本操作的 API，也提供了一些经典的计算机视觉算法。常用于解决计算机视觉，图像处理和模式识别等方面的问题。关于 OpenCV 的详细介绍，这里不赘述，有兴趣请参考 <a href="https://en.wikipedia.org/wiki/OpenCV" rel="external nofollow noopener noreferrer" target="_blank">OpenCV Wikipedia</a> 或者 <a href="http://opencv.org/" rel="external nofollow noopener noreferrer" target="_blank">OpenCV 主页</a>。</p>
<p>&emsp;&emsp;OpenCV 使用 C 语言高速地实现了许多图像处理和计算机视觉方面的通用算法，并且通过 <a href="http://www.swig.org/" rel="external nofollow noopener noreferrer" target="_blank">SWIG</a> 提供了 Python 的调用接口。OpenCV 提供的 Python 调用接口和 C 语言的 API 基本上是一致的，这个接口对于动态语言 Python 来说有些累赘。不过由于 Python 程序和 C 语言程序差别不大，用 Python 调用 OpenCV，能够帮助我们测试 API 函数和快速实现算法。</p>
<p>&emsp;&emsp;接下来就开始从简单的图像读取、显示、创建（复制）和写入等操作来逐步了解 OpenCV for Python。</p>
<a id="more"></a>
<p>###0x00.导入模块<br>首先导入 OpenCV for Python 的模块 cv2：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div></pre></td></tr></table></figure>
<p>由于 OpenCV for Python 是和 Numpy 绑定在一起的，很多时候可以直接使用 Numpy 的 API 来操作图像，所以这里也导入 Numpy 模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div></pre></td></tr></table></figure>
<p>至于代码中涉及的 matplotlib，目前只用于图像显示，可以忽略 :）</p>
<p>###0x01.读取图像<br>读取图像非常简单:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.imread(filename[, flags])</div></pre></td></tr></table></figure>
<p>支持常见的图像格式，并且可以通过 <code>flags</code> 参数指定读取图像的颜色类型(Color or Gray)。通过 <code>type(img)</code> 可以看到，读取出来的图像是一个 Numpy 数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;type <span class="string">'numpy.ndarray'</span>&gt;</div></pre></td></tr></table></figure>
<p>所以可以使用 Numpy 的 API 来处理图像。</p>
<p>###0x02.显示图像<br>新建一个窗口：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.namedWindow(winname[, flags])</div></pre></td></tr></table></figure>
<p>然后在这个窗口中显示图像，或者直接显示图像而不显式创建窗口。前者可以通过 <code>flags</code> 参数设置窗口的一些属性，比如当图片过大屏幕显示不下，使用 <code>cv2.WINDOW_NORMAL</code> 可以让图片正常显示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.imshow(winname, mat)</div></pre></td></tr></table></figure>
<p>后面还要添上一句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.waitKey([delay])</div></pre></td></tr></table></figure>
<p>如果不添这一句，在 IDLE 中执行窗口直接无响应；在命令行中执行的话，会一闪而过。<code>delay</code> 参数单位是毫秒，当 <code>delay &lt;= 0</code>，会无限等待一个键盘输入，至于传递一个正值，目前还没发现当到达这个设置的 <code>delay</code> 值却没有任何键盘输入会发生什么，文档中写的是会返回一个 -1；如果按键了，会返回这个按键的 ASCII 值。</p>
<p>###0x03.创建图像<br>创建图像可以创建一个 Numpy 的全 0 数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.zeros(shape, dtype=float, order=<span class="string">'C'</span>)</div></pre></td></tr></table></figure>
<p>这个空白图像其实就是一个用 0 填充的 Numpy 数组，可以通过 <code>shape</code> 指定数组的形状，通过 <code>dtype</code> 指定数组中存的数据的类型。另一种方式，通过复制一幅图像来创建一个副本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">image_copy = image_original.copy()</div></pre></td></tr></table></figure>
<p>###0x04.写入图像</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imwrite(filename, img[, params])</div></pre></td></tr></table></figure>
<p>通过 <code>params</code> 可以设置保存图像的质量和压缩级别等参数。对于保存的图像，格式不同，参数的意义也不同，比如对于 JPEG 格式的图像，其表示的是图像的质量，用 0-100 的整数表示，默认为95。 注意，<code>cv2.IMWRITE_JPEG_QUALITY</code> 类型为 Long，必须转换成 int；而对于 PNG 格式的图像，第三个参数表示的是压缩级别，<code>cv2.IMWRITE_PNG_COMPRESSION</code>，从 0 到 9，数值越大压缩级别越高，图像尺寸越小，默认压缩级别为 3.</p>
<p>###0x05.程序清单</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-01-09 23:25:31</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span><span class="params">(img, window_name)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    显示图像</div><div class="line">    '''</div><div class="line"></div><div class="line">    cv2.namedWindow(window_name, cv2.WINDOW_AUTOSIZE)</div><div class="line"></div><div class="line">    cv2.imshow(window_name, img)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:  <span class="comment"># 按 ESC 退出</span></div><div class="line"></div><div class="line">        cv2.destroyWindow(window_name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image_with_matplotlib</span><span class="params">(img, window_name)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    用 Matplotlib 显示图像</div><div class="line">    '''</div><div class="line"></div><div class="line">    plt.title(window_name, fontsize=<span class="number">18</span>)</div><div class="line"></div><div class="line">    plt.imshow(X=img, cmap=<span class="string">'gray'</span>, interpolation=<span class="string">'bicubic'</span>)</div><div class="line"></div><div class="line">    plt.xticks([])</div><div class="line"></div><div class="line">    plt.yticks([])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_image</span><span class="params">(name, img, quality=<span class="number">100</span>, compression=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    把图像写入文件，设置图片质量等参数</div><div class="line">    '''</div><div class="line"></div><div class="line">    cv2.imwrite(name, img, [int(cv2.IMWRITE_JPEG_QUALITY), quality])</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_image</span><span class="params">(img)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    新建图像</div><div class="line">    '''</div><div class="line"></div><div class="line">    blank_image = np.zeros(img.shape, np.uint8)  <span class="comment"># 使用 numpy 新建空白图像</span></div><div class="line"></div><div class="line">    write_image(<span class="string">'blank.jpg'</span>, blank_image)</div><div class="line"></div><div class="line">    show_image(cv2.imread(<span class="string">'blank.jpg'</span>), <span class="string">'Blank Image'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_image</span><span class="params">(img)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    复制图像</div><div class="line">    '''</div><div class="line"></div><div class="line">    copy_image = img.copy()</div><div class="line"></div><div class="line">    write_image(<span class="string">'testCopy.jpg'</span>, copy_image, <span class="number">5</span>)</div><div class="line"></div><div class="line">    show_image(cv2.imread(<span class="string">'testCopy.jpg'</span>), <span class="string">'Copy Image'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    img = cv2.imread(<span class="string">'Lenna.png'</span>)</div><div class="line"></div><div class="line">    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    show_image_with_matplotlib(img, <span class="string">'ImageShow'</span>)</div><div class="line"></div><div class="line">    create_image(img)</div><div class="line"></div><div class="line">    copy_image(img)</div><div class="line"></div><div class="line">    cv2.destroyAllWindows()</div></pre></td></tr></table></figure>
<p>最后，不要忘了释放所有窗口 :）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.destroyAllWindows()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Read and Write Images
    
    </summary>
    
      <category term="OpenCV" scheme="https://blog.nssimacer.tech/categories/OpenCV/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://blog.nssimacer.tech/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0023: Message Board</title>
    <link href="https://blog.nssimacer.tech/post/22c2fc61/"/>
    <id>https://blog.nssimacer.tech/post/22c2fc61/</id>
    <published>2015-04-01T14:46:25.000Z</published>
    <updated>2016-12-01T07:37:56.186Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 使用 Python 的 Web 框架，做一个 Web 版本留言簿应用。</p>
<p>阅读资料: <a href="http://v2ex.com/t/151643#reply53" rel="external nofollow noopener noreferrer" target="_blank">Python 有哪些 Web 框架</a></p>
<p><em>Solution</em>: Message Board, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-04-01 15:08:21</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, g, redirect, url_for, abort, \</div><div class="line">    render_template, flash</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</div><div class="line"></div><div class="line"></div><div class="line">DATABASE = <span class="string">'message board.db'</span></div><div class="line">DEBUG = <span class="keyword">True</span></div><div class="line">SECRET_KEY = <span class="string">'development key'</span></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config.from_object(__name__)</div><div class="line">app.config.from_envvar(<span class="string">'MB_SETTINGS'</span>, silent=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    连接 SQLite 3 数据库</div><div class="line">    '''</div><div class="line"></div><div class="line">    conn = sqlite3.connect(app.config[<span class="string">'DATABASE'</span>])</div><div class="line"></div><div class="line">    conn.row_factory = sqlite3.Row</div><div class="line"></div><div class="line">    <span class="keyword">return</span> conn</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    在应用上下文环境中保持数据库连接</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(g, <span class="string">'sqlite_db'</span>):</div><div class="line"></div><div class="line">        g.sqlite_db = connect_db()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> g.sqlite_db</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.teardown_appcontext</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    应用关闭时关闭数据库</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hasattr(g, <span class="string">'sqlite_db'</span>):</div><div class="line"></div><div class="line">        g.sqlite_db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    初始化数据库</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">with</span> app.app_context():</div><div class="line"></div><div class="line">        db = get_db()</div><div class="line"></div><div class="line">        <span class="keyword">with</span> app.open_resource(<span class="string">'schema.sql'</span>, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">            db.cursor().executescript(f.read())  <span class="comment"># 执行 SQL 脚本</span></div><div class="line"></div><div class="line">        db.commit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_name_by_id</span><span class="params">(user_id)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    根据用户 ID 查找用户名</div><div class="line">    '''</div><div class="line"></div><div class="line">    cursor = g.db.execute(</div><div class="line">        <span class="string">'select user_name from t_user where user_id=?'</span>, (user_id, ))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cursor.fetchone()[<span class="number">0</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.before_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    g.db = connect_db()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_messages</span><span class="params">(messages=None)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    显示留言</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">'logged_in'</span>):  <span class="comment"># 未登录则先跳到登录页面</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line"></div><div class="line">    cursor = g.db.execute(</div><div class="line">        <span class="string">'select topic, message_content, message_time, \</span></div><div class="line">        user_id from t_messages order by message_id desc limit 5')</div><div class="line"></div><div class="line">    messages = [dict(user_name=get_user_name_by_id(row[<span class="number">3</span>]),</div><div class="line">                     topic=row[<span class="number">0</span>],</div><div class="line">                     message_content=row[<span class="number">1</span>],</div><div class="line">                     message_time=row[<span class="number">2</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall()]</div><div class="line"></div><div class="line">    <span class="comment"># 传递留言列表到页面并对页面进行渲染</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, messages=messages)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/add_new_message', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_new_message</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    添加新的留言</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">'logged_in'</span>):</div><div class="line"></div><div class="line">        abort(<span class="number">401</span>)  <span class="comment"># 未登录验证用户</span></div><div class="line"></div><div class="line">    params = ([session[<span class="string">'user'</span>][<span class="string">'user_id'</span>],</div><div class="line">               request.form[<span class="string">'topic'</span>],</div><div class="line">               request.form[<span class="string">'message'</span>],</div><div class="line">               date.today()])</div><div class="line"></div><div class="line">    g.db.execute(<span class="string">'insert into t_messages values(null, ?, ?, ?, ?)'</span>, params)</div><div class="line"></div><div class="line">    g.db.commit()</div><div class="line"></div><div class="line">    flash(<span class="string">'New mesage was successfully posted!'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'show_messages'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    登录留言板</div><div class="line">    '''</div><div class="line"></div><div class="line">    error = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line"></div><div class="line">        params = (request.form[<span class="string">'userName'</span>], request.form[<span class="string">'pwd'</span>])</div><div class="line"></div><div class="line">        cursor = g.db.execute(</div><div class="line">            <span class="string">'select * from t_user where user_name=? and user_pwd=?'</span>, params)</div><div class="line"></div><div class="line">        row = cursor.fetchone()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> row <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line"></div><div class="line">            error = <span class="string">'Login failed!'</span></div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            user = dict(user_id=row[<span class="number">0</span>], user_name=row[<span class="number">1</span>])</div><div class="line"></div><div class="line">            session[<span class="string">'user'</span>] = user</div><div class="line">            session[<span class="string">'logged_in'</span>] = <span class="keyword">True</span></div><div class="line"></div><div class="line">            flash(<span class="string">'You have logged in!'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'show_messages'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    退出留言板</div><div class="line">    '''</div><div class="line"></div><div class="line">    session.pop(<span class="string">'logged_in'</span>, <span class="keyword">None</span>)</div><div class="line">    session.pop(<span class="string">'user'</span>, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">    flash(<span class="string">'You have logged out!'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'login.html'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    用户注册</div><div class="line">    '''</div><div class="line"></div><div class="line">    error = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line"></div><div class="line">        user_name = request.form[<span class="string">'userName'</span>]</div><div class="line">        pwd = request.form[<span class="string">'pwd'</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> user_name != <span class="string">''</span> <span class="keyword">and</span> pwd != <span class="string">''</span>:</div><div class="line"></div><div class="line">            params = (user_name, pwd)</div><div class="line"></div><div class="line">            g.db.execute(<span class="string">'insert into t_user values(null, ?, ?)'</span>, params)</div><div class="line"></div><div class="line">            g.db.commit()</div><div class="line"></div><div class="line">            flash(<span class="string">'Registered successfully!'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line"></div><div class="line">            error = <span class="string">'Invalid user name or password!'</span></div><div class="line"></div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'register'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, error=error)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    app.run()</div><div class="line"></div></pre></td></tr></table></figure>
<p>这个题目的主要目的是练习 Python Web 框架的使用，比较常用的框架有 <a href="https://www.djangoproject.com/" rel="external nofollow noopener noreferrer" target="_blank">Django</a>，<a href="http://flask.pocoo.org/" rel="external nofollow noopener noreferrer" target="_blank">Flask</a>，<a href="http://www.pylonsproject.org/" rel="external nofollow noopener noreferrer" target="_blank">Pyramid</a> … 关于这几者的比较，可以参考 <a href="https://www.airpair.com/python/posts/django-flask-pyramid" rel="external nofollow noopener noreferrer" target="_blank">Django vs Flask vs Pyramid: Choosing a Python Web Framework</a>，然后选择一个 Web 框架完成这道习题。</p>
<p>我选择了 Flask，因为它比较“轻量”，并且适合比较喜欢折腾的人。这道习题是参考 <a href="http://flask.pocoo.org/" rel="external nofollow noopener noreferrer" target="_blank">Flask 的文档</a>写的，也可以参考翻译过来的<a href="http://docs.jinkan.org/docs/flask/index.html" rel="external nofollow noopener noreferrer" target="_blank"> Flask 中文文档</a>。</p>
<p>关于数据存储，题目需求比较简单，可以选择 MySQL，SQLite，Shelve 或者 Redis … 完全看个人喜好。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Message Board
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0022: Resize Images II</title>
    <link href="https://blog.nssimacer.tech/post/483de0b4/"/>
    <id>https://blog.nssimacer.tech/post/483de0b4/</id>
    <published>2015-03-31T01:42:57.000Z</published>
    <updated>2016-12-01T07:37:56.184Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: iPhone 6、iPhone 6 Plus 早已上市开卖。请查看你写得<a href="http://nssimacer.github.io/blog/2015/03/08/exercise-0005-resize-images/" rel="external nofollow noopener noreferrer" target="_blank">第 0005 题</a>的代码是否可以复用。</p>
<p><em>Solution</em>: Resize Images II, Python:</p>
<a id="more"></a>
<p>函数定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize_images</span><span class="params">(base_dir, size=<span class="params">(<span class="number">1136</span>, <span class="number">640</span>)</span>)</span>:</span></div></pre></td></tr></table></figure>
<p>默认传给这个函数的 size 参数为 iPhone 5 的分辨率，在调用时，只需要把 iPhone 6/6 plus 的分辨率作为参数传给这个函数就可以把图片分辨率改为 iPhone 6/6plus 的大小了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    base_dir = <span class="string">'iPhone5/'</span></div><div class="line"></div><div class="line">    resize_images(base_dir)</div><div class="line"></div><div class="line">    base_dir_i6 = <span class="string">'iPhone6/'</span></div><div class="line"></div><div class="line">    resize_images(base_dir_i6, size=(<span class="number">1334</span>, <span class="number">750</span>))</div></pre></td></tr></table></figure>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Resize Images II
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0021: Encrypt Password</title>
    <link href="https://blog.nssimacer.tech/post/17db024d/"/>
    <id>https://blog.nssimacer.tech/post/17db024d/</id>
    <published>2015-03-30T08:03:53.000Z</published>
    <updated>2016-12-01T07:37:56.183Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。</p>
<ul>
<li><p>阅读资料 <a href="http://zhuoqiang.me/password-storage-and-python-example.html" rel="external nofollow noopener noreferrer" target="_blank">用户密码的存储与 Python 示例</a></p>
</li>
<li><p>阅读资料 <a href="http://www.pythoncentral.io/hashing-strings-with-python/" rel="external nofollow noopener noreferrer" target="_blank">Hashing Strings with Python</a></p>
</li>
<li><p>阅读资料 <a href="http://stackoverflow.com/questions/2572099/pythons-safest-method-to-store-and-retrieve-passwords-from-a-database" rel="external nofollow noopener noreferrer" target="_blank">Python’s safest method to store and retrieve passwords from a database</a></p>
</li>
</ul>
<p><em>Solution</em>: Encrypt Password, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-30 15:33:23</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</div><div class="line"><span class="keyword">from</span> hmac <span class="keyword">import</span> HMAC</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_password</span><span class="params">(password, salt=None)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    使用 salt 加 hash 来单向转换密码明文</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line"></div><div class="line">        salt = os.urandom(<span class="number">8</span>)  <span class="comment"># 64 位 salt</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span> <span class="number">8</span> == len(salt)</div><div class="line">    <span class="keyword">assert</span> isinstance(salt, str)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(password, unicode):</div><div class="line"></div><div class="line">        password = password.encode(<span class="string">'utf-8'</span>)  <span class="comment"># 对密码明文进行 UTF-8 编码</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span> isinstance(password, str)</div><div class="line"></div><div class="line">    result = password</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):  <span class="comment"># 使用 HMAC 对密码和 salt 进行 10 次叠代混淆</span></div><div class="line"></div><div class="line">        result = HMAC(result, salt, sha256).digest()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> salt + result</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_password</span><span class="params">(hashed_password, input_password)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    单向转换，验证输入的密码</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">return</span> hashed_password == encrypt_password(input_password,</div><div class="line">                                               salt=hashed_password[:<span class="number">8</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    hashed_password = encrypt_password(<span class="string">'NSS'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> validate_password(hashed_password, <span class="string">'NSS'</span>):</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">'Success!'</span></div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">'Failed!'</span></div></pre></td></tr></table></figure>
<p>主要目的是了解 Python 用于加密时候常用的 API —— 用于生成加密使用的 salt <code>os.urandom(self, args)</code>，加密算法 <code>sha256</code>，加密模块 <code>HMAC</code>。</p>
<p>参考文章： <a href="http://zhuoqiang.me/password-storage-and-python-example.html" rel="external nofollow noopener noreferrer" target="_blank">用户密码的存储与 Python 示例</a></p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Encrypt Password
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0020: Total Call Time</title>
    <link href="https://blog.nssimacer.tech/post/a164e490/"/>
    <id>https://blog.nssimacer.tech/post/a164e490/</id>
    <published>2015-03-29T04:10:30.000Z</published>
    <updated>2016-12-01T07:37:56.180Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>:  登陆<a href="http://iservice.10010.com/index_.html" rel="external nofollow noopener noreferrer" target="_blank">中国联通网上营业厅</a>后选择「自助服务」 –&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</p>
<p><em>Solution</em>:  Total Call Time, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-29 10:18:02</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    从 Excel 文件中读取通话时长数据，以 list 格式返回</div><div class="line">    '''</div><div class="line"></div><div class="line">    workbook = open_workbook(f_path, encoding_override=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    sheet = workbook.sheet_by_name(<span class="string">'2015年02月语音通信'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [item.value <span class="keyword">for</span> item <span class="keyword">in</span> sheet.col_slice(<span class="number">4</span>, <span class="number">1</span>, sheet.nrows)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">total_call_time</span><span class="params">(call_time)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    计算总的通话时长</div><div class="line">    '''</div><div class="line"></div><div class="line">    time_regex = re.compile(<span class="string">r'\d+'</span>)  <span class="comment"># 匹配每条通话记录中的数字</span></div><div class="line"></div><div class="line">    hour = <span class="number">0</span></div><div class="line">    minute = <span class="number">0</span></div><div class="line">    second = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> call_time:  <span class="comment"># 根据数字个数累加时分秒</span></div><div class="line"></div><div class="line">        time = map(int, time_regex.findall(item))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(time) == <span class="number">1</span>:</div><div class="line"></div><div class="line">            second += time[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(time) == <span class="number">2</span>:</div><div class="line"></div><div class="line">            second += time[<span class="number">1</span>]</div><div class="line">            minute += time[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(time) == <span class="number">3</span>:</div><div class="line"></div><div class="line">            second += time[<span class="number">2</span>]</div><div class="line">            minute += time[<span class="number">1</span>]</div><div class="line">            hour += time[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> second &gt;= <span class="number">60</span>:  <span class="comment"># 进位</span></div><div class="line"></div><div class="line">            minute += second / <span class="number">60</span></div><div class="line"></div><div class="line">            second %= <span class="number">60</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> minute &gt;= <span class="number">60</span>:</div><div class="line"></div><div class="line">            hour += minute / <span class="number">60</span></div><div class="line"></div><div class="line">            minute %= <span class="number">60</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> hour, minute, second</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    f_path = <span class="string">'2015-02-call-detail.xls'</span></div><div class="line"></div><div class="line">    call_time = load_data(f_path)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'Total Call Time: %s hours, %s minutes, %s seconds'</span>\</div><div class="line">        % (total_call_time(call_time))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>主要目的还是用 Python 去操作 Excel 文件，这里只需要读取出“通话时间”这一列数据 <code>sheet.col_slice(self, col_index, start_index, end_index)</code>，然后对通话时间进行累加即可。不太清楚有什么比较好的方法格式化时间然后直接相加，这里用了正则表达式匹配每条通话记录里的数字，根据数字个数，累加时分秒。</p>
<p>通话记录的格式是：</p>
<pre>
起始时间 | 通话地点 | 呼叫类型 | 对方号码 | 通话时长 | 通话类型 | 通话费
--- | --- | --- | --- | --- | --- | --- 
2015-02-28 15:26:39 | 抚州 | 被叫 | sssssssssss | 2分51秒 | 国内漫游 | 0.00
</pre>

<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Total Call Time
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0019: Write Excel Data to XML III</title>
    <link href="https://blog.nssimacer.tech/post/c5e06ee1/"/>
    <id>https://blog.nssimacer.tech/post/c5e06ee1/</id>
    <published>2015-03-28T13:36:49.000Z</published>
    <updated>2016-12-01T07:37:56.176Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 将<a href="http://nssimacer.github.io/blog/2015/03/25/exercise-0016-write-data-to-excel-iii/" rel="external nofollow noopener noreferrer" target="_blank">第 0016 题</a>中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下</p>
<p>所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">numbers</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">    数字信息</div><div class="line">--&gt;</div><div class="line"></div><div class="line">[</div><div class="line">    [1, 82, 65535],</div><div class="line">    [20, 90, 13],</div><div class="line">    [26, 809, 1024]</div><div class="line">]</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">numbers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<p><em>Solution</em>: Write Excel Data to XML III, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-28 21:13:00</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"><span class="keyword">from</span> xml.dom <span class="keyword">import</span> minidom</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_xml</span><span class="params">(list_content)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将 dict 格式数据写入 xml 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    xml_doc = minidom.Document()</div><div class="line"></div><div class="line">    root = xml_doc.createElement(<span class="string">'root'</span>)</div><div class="line"></div><div class="line">    xml_doc.appendChild(root)</div><div class="line"></div><div class="line">    numbers = xml_doc.createElement(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line">    root.appendChild(numbers)</div><div class="line"></div><div class="line">    comment = xml_doc.createComment(<span class="string">'数字信息'</span>)</div><div class="line"></div><div class="line">    numbers.appendChild(comment)</div><div class="line"></div><div class="line">    content = xml_doc.createTextNode(str(list_content))</div><div class="line"></div><div class="line">    numbers.appendChild(content)</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'numbers.xml'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">        f.write(xml_doc.toprettyxml(encoding=<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_as_list</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    从 Excel 文件中读取数据，以 list 格式返回</div><div class="line">    '''</div><div class="line"></div><div class="line">    workbook = open_workbook(f_path)</div><div class="line"></div><div class="line">    list_content = []</div><div class="line"></div><div class="line">    sheet = workbook.sheet_by_name(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> xrange(sheet.nrows):</div><div class="line"></div><div class="line">        list_content.append(sheet.row_values(row)[:])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> list_content</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    f_path = <span class="string">'numbers.xlsx'</span></div><div class="line"></div><div class="line">    list_content = load_data_as_list(f_path)</div><div class="line"></div><div class="line">    write_data_to_xml(list_content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>与<a href="http://nssimacer.github.io/blog/2015/03/27/exercise-0018-write-excel-data-to-xml-ii/" rel="external nofollow noopener noreferrer" target="_blank">第 0018题</a>相似。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Excel Data to XML III
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0018: Write Excel Data to XML II</title>
    <link href="https://blog.nssimacer.tech/post/3638f6f3/"/>
    <id>https://blog.nssimacer.tech/post/3638f6f3/</id>
    <published>2015-03-27T04:53:31.000Z</published>
    <updated>2016-12-01T07:37:56.178Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 将<a href="https://nssimacer.github.io/blog/2015/03/24/exercise-0015-write-data-to-excel-ii/" rel="external nofollow noopener noreferrer" target="_blank">第 0015 题</a>中的 city.xls 文件中的内容写到 city.xml 文件中，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xmlversion="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">citys</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">    城市信息</div><div class="line">--&gt;</div><div class="line">&#123;</div><div class="line">    "1" : "上海",</div><div class="line">    "2" : "北京",</div><div class="line">    "3" : "成都"</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">citys</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<p><em>Solution</em>: Write Excel Data to XML II, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-27 12:26:06</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"><span class="keyword">from</span> xml.dom <span class="keyword">import</span> minidom</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_xml</span><span class="params">(dict_conent)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将 dict 格式数据写入 xml 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    xml_doc = minidom.Document()</div><div class="line"></div><div class="line">    root = xml_doc.createElement(<span class="string">'root'</span>)</div><div class="line"></div><div class="line">    xml_doc.appendChild(root)</div><div class="line"></div><div class="line">    city = xml_doc.createElement(<span class="string">'city'</span>)</div><div class="line"></div><div class="line">    root.appendChild(city)</div><div class="line"></div><div class="line">    comment = xml_doc.createComment(<span class="string">'城市信息'</span>)</div><div class="line"></div><div class="line">    city.appendChild(comment)</div><div class="line">    content = xml_doc.createTextNode(str(dict_conent))</div><div class="line"></div><div class="line">    city.appendChild(content)</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'city.xml'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">        f.write(xml_doc.toprettyxml(encoding=<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_as_dict</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    从 Excel 文件中读取数据，以 dict 格式返回</div><div class="line">    '''</div><div class="line"></div><div class="line">    dict_conent = &#123;&#125;</div><div class="line"></div><div class="line">    workbook = open_workbook(f_path, encoding_override=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    sheet = workbook.sheet_by_name(<span class="string">'city'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> xrange(sheet.nrows):</div><div class="line"></div><div class="line">        dict_conent[str(row + <span class="number">1</span>)] = str(sheet.row_values(row)[<span class="number">1</span>:])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dict_conent</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    f_path = <span class="string">'city.xlsx'</span></div><div class="line"></div><div class="line">    dict_conent = load_data_as_dict(f_path)</div><div class="line"></div><div class="line">    write_data_to_xml(dict_conent)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    main()</div><div class="line"></div></pre></td></tr></table></figure>
<p>与<a href="http://nssimacer.github.io/blog/2015/03/26/exercise-0017-write-excel-data-to-xml/" rel="external nofollow noopener noreferrer" target="_blank">第 0017 题</a>相似。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Excel Data to XML II
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0017: Write Excel Data to XML</title>
    <link href="https://blog.nssimacer.tech/post/f9951be2/"/>
    <id>https://blog.nssimacer.tech/post/f9951be2/</id>
    <published>2015-03-26T07:04:56.000Z</published>
    <updated>2016-12-01T07:37:56.171Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 将<a href="https://nssimacer.github.io/blog/2015/03/23/exercise-0014-write-data-to-excel/" rel="external nofollow noopener noreferrer" target="_blank">第 0014 题</a>中的 student.xls 文件中的内容写到 student.xml 文件中，如</p>
<p>下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">    学生信息表</div><div class="line">    "id" : [名字, 数学, 语文, 英文]</div><div class="line">--&gt;</div><div class="line">&#123;</div><div class="line">    "1" : ["张三", 150, 120, 100],</div><div class="line">    "2" : ["李四", 90, 99, 95],</div><div class="line">    "3" : ["王五", 60, 66, 68]</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<p><em>Solution</em>: Write Excel Data to XML, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-26 10:56:53</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"><span class="keyword">from</span> xml.dom <span class="keyword">import</span> minidom</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_excel_data_as_dict</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    从 Excel 文件中读取数据，以 dict 格式返回</div><div class="line">    '''</div><div class="line"></div><div class="line">    dict_content = &#123;&#125;</div><div class="line"></div><div class="line">    workbook = open_workbook(<span class="string">'students.xlsx'</span>, encoding_override=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    sheet = workbook.sheet_by_name(<span class="string">'student'</span>)  <span class="comment"># 根据表单名获得 Excel 表单</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> xrange(sheet.nrows):</div><div class="line"></div><div class="line">        dict_content[str(row + <span class="number">1</span>)] = sheet.row_values(row)[<span class="number">1</span>:]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dict_content</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_xml</span><span class="params">(dict_content)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将 dict 格式数据写入 xml 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    xml_doc = minidom.Document()  <span class="comment"># 新建 Document 对象</span></div><div class="line"></div><div class="line">    root = xml_doc.createElement(<span class="string">'root'</span>)  <span class="comment"># 创建根节点</span></div><div class="line"></div><div class="line">    xml_doc.appendChild(root)  <span class="comment"># 追加根节点到 Document 对象上</span></div><div class="line"></div><div class="line">    students = xml_doc.createElement(<span class="string">'students'</span>)  <span class="comment"># 创建 students 节点</span></div><div class="line"></div><div class="line">    root.appendChild(students)  <span class="comment"># 追加 students 节点到 Document 对象上</span></div><div class="line"></div><div class="line">    comment = xml_doc.createComment(</div><div class="line">        <span class="string">"学生信息表\"id\" : [名字, 数学, 语文, 英文]"</span>)  <span class="comment"># 创建注释节点</span></div><div class="line"></div><div class="line">    students.appendChild(comment)  <span class="comment"># 追加注释节点到 students 节点上</span></div><div class="line"></div><div class="line">    conent = xml_doc.createTextNode(</div><div class="line">        str(dict_content).encode(<span class="string">'utf-8'</span>))  <span class="comment"># 创建文本节点</span></div><div class="line"></div><div class="line">    students.appendChild(conent)  <span class="comment"># 追加文本节点到 students 节点上</span></div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'students.xml'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:  <span class="comment"># 将数据写入 xml 文件中</span></div><div class="line"></div><div class="line">        f.write(xml_doc.toprettyxml(encoding=<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    f_path = <span class="string">'students.xlsx'</span></div><div class="line"></div><div class="line">    d = load_excel_data_as_dict(f_path)</div><div class="line"></div><div class="line">    write_data_to_xml(d)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    main()</div><div class="line"></div></pre></td></tr></table></figure>
<p>主要目的是使用 Python 操作 Excel 和 XML，涉及的第三方库有 <a href="https://pypi.python.org/pypi/xlrd" rel="external nofollow noopener noreferrer" target="_blank">xlrd</a> 和 <a href="https://docs.python.org/2/library/xml.dom.minidom.html" rel="external nofollow noopener noreferrer" target="_blank">xml.dom.minidom</a>. 基本思路是 —— 先从 Excel 文件中读取数据，封装成 dict 或者 json 格式，然后把 dict 或者 json 写入 XML 文件中，如果是直接将 dict 写入 XML，可以考虑使用 <a href="https://pypi.python.org/pypi/dicttoxml" rel="external nofollow noopener noreferrer" target="_blank">dicttoxml</a>，它会解析 dict，把 dict 中的每个键值对作为一个节点写入 XML，但是题目中要求把读出来的数据以字符串的形式写到 XML 的一个元素中，作为其 text 节点。</p>
<p>使用到的 API 有：打开 Excel 文件 <code>open_workbook(self, args)</code>，获得表单 <code>work.sheet_by_name/index(self, args)</code>，接着再按行或者按列读取，或者读取某个单元格 <code>sheet.cell(self, row, col).value</code>，把读出来的数据封装到 dict 里，再把 dict 写到 XML里，这里涉及的 API 有 <code>minidom.Document()</code>，创建一个 Document 对象，也就是 XML 文档对象，调用 <code>xml_doc.createElement/TextNode/Comment(self, args)</code> 创建所需节点和元素，再把这些节点和元素添加到 XML 文档中 <code>appendChild(self, args)</code>，最后把 XML 文档对象写入文件中，这里在写入之前对 XML 文档对象调整了一下样式，使其显示起来正常一些 <code>xml_doc.toprettyxml(self, args)</code>.</p>
<p>遗留的问题：dict 中有中文，写入 XML 时，无法正常编/解码。关于 Python 2.x 中文编码吐槽，看这里 <a href="http://segmentfault.com/q/1010000000431184" rel="external nofollow noopener noreferrer" target="_blank">python中文字符转义问题</a>。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Excel Data to XML
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0016: Write Data to Excel III</title>
    <link href="https://blog.nssimacer.tech/post/1a7b641/"/>
    <id>https://blog.nssimacer.tech/post/1a7b641/</id>
    <published>2015-03-25T10:20:32.000Z</published>
    <updated>2016-12-01T07:37:56.173Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：</p>
<pre>
[
    [1, 82, 65535], 
    [20, 90, 13],
    [26, 809, 1024]
]
</pre>


<p>请将上述内容写到 numbers.xls 文件中，如下图所示：</p>
<p><img src="https://camo.githubusercontent.com/60da4d596289212b517547ddcc2408bfc9f39087/687474703a2f2f692e696d6775722e636f6d2f69757a305062762e706e67" alt=""></p>
<p><em>Solution</em>: Write Data to Excel III, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-25 18:03:30</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlsxwriter</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_excel</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    把数据写入 xlsx 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    json_content = load_data_as_json(f_path)</div><div class="line"></div><div class="line">    workbook = xlsxwriter.Workbook(<span class="string">'numbers.xlsx'</span>)  <span class="comment"># 新建一个 xlsx 文件</span></div><div class="line">    worsheet = workbook.add_worksheet(<span class="string">'numbers'</span>)  <span class="comment"># 添加 xlsx 表单</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(json_content)):  <span class="comment"># 把 json 数据写入表单单元格中</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> j, item <span class="keyword">in</span> enumerate(json_content[i]):</div><div class="line"></div><div class="line">            worsheet.write(i, j, item)</div><div class="line"></div><div class="line">    workbook.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_as_json</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将载入的 txt 文件转换成 json 数据格式</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(f_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">        txt_content = f.read()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> json.loads(txt_content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    f_path = <span class="string">'numbers.txt'</span></div><div class="line"></div><div class="line">    write_data_to_excel(f_path)</div><div class="line"></div></pre></td></tr></table></figure>
<p>与 <a href="https://nssimacer.github.io/blog/2015/03/24/exercise-0015-write-data-to-excel-ii/" rel="external nofollow noopener noreferrer" target="_blank">Exercise 0015: Write Data to Excel II</a> 相似。</p>
<p>关于 JSON 语法，参考 <a href="http://www.w3school.com.cn/json/json_syntax.asp" rel="external nofollow noopener noreferrer" target="_blank">JSON 语法</a>。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Data to Excel III
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0015: Write Data to Excel II</title>
    <link href="https://blog.nssimacer.tech/post/4640817d/"/>
    <id>https://blog.nssimacer.tech/post/4640817d/</id>
    <published>2015-03-24T15:38:46.000Z</published>
    <updated>2016-12-01T07:37:56.169Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>:  纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：</p>
<pre>
{
    "1" : "上海",
    "2" : "北京",
    "3" : "成都"
}
</pre>

<p>请将上述内容写到 city.xls 文件中，如下图所示：</p>
<p><img src="https://camo.githubusercontent.com/61120377319bfe5520c9d73f51776f923d6bd3b7/687474703a2f2f692e696d6775722e636f6d2f724f4862557a672e706e67" alt=""></p>
<p><em>Solution</em>: Write Data to Excel II, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-24 23:04:10</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlsxwriter</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_excel</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    把数据写入 xlsx 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    json_content = load_data_as_json(f_path)</div><div class="line"></div><div class="line">    workbook = xlsxwriter.Workbook(<span class="string">'city.xlsx'</span>)  <span class="comment"># 新建一个 xlsx 文件</span></div><div class="line">    worksheet = workbook.add_worksheet(<span class="string">'city'</span>)  <span class="comment"># 添加 xlsx 表单</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(json_content)):  <span class="comment"># 把 json 数据写入表单单元格中</span></div><div class="line"></div><div class="line">        worksheet.write(i, <span class="number">0</span>, i + <span class="number">1</span>)</div><div class="line">        worksheet.write(i, <span class="number">1</span>, json_content[str(i + <span class="number">1</span>)])</div><div class="line"></div><div class="line">    workbook.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_as_json</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将载入的 txt 文件转换成 json 数据格式</div><div class="line">    '''</div><div class="line">    <span class="keyword">with</span> open(f_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">        txt_content = f.read()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> json.loads(txt_content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    f_path = <span class="string">'city.txt'</span></div><div class="line"></div><div class="line">    write_data_to_excel(f_path)</div><div class="line"></div></pre></td></tr></table></figure>
<p>与 <a href="https://nssimacer.github.io/blog/2015/03/23/exercise-0014-write-data-to-excel/" rel="external nofollow noopener noreferrer" target="_blank">Exercise 0014: Write Data to Excel</a> 相似。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Data to Excel II
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
  <entry>
    <title>Exercise 0014: Write Data to Excel</title>
    <link href="https://blog.nssimacer.tech/post/e5db8cd1/"/>
    <id>https://blog.nssimacer.tech/post/e5db8cd1/</id>
    <published>2015-03-23T09:05:09.000Z</published>
    <updated>2016-12-01T07:37:56.167Z</updated>
    
    <content type="html"><![CDATA[<p><em>Problem</em>: 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p>
<pre>
{
    "1":["张三",150,120,100],
    "2":["李四",90,99,95],
    "3":["王五",60,66,68]
}
</pre>

<p>请将上述内容写到 student.xls 文件中，如下图所示：</p>
<p><img src="https://camo.githubusercontent.com/18dea9401449e4ca894d40d55134d9c28083280d/687474703a2f2f692e696d6775722e636f6d2f6e50446c706d652e6a7067" alt=""></p>
<ul>
<li>阅读资料 <a href="http://www.cnblogs.com/skynet/archive/2013/05/06/3063245.html" rel="external nofollow noopener noreferrer" target="_blank">腾讯游戏开发 XML 和 Excel 内容相互转换</a></li>
</ul>
<p><em>Solution</em>: Write Data to Excel, Python:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Date    : 2015-03-23 16:15:47</span></div><div class="line"><span class="comment"># @Author  : NSSimacer</span></div><div class="line"><span class="comment"># @Email   : wuxiaoqiang1020@gmail.com</span></div><div class="line"><span class="comment"># @Version : 1.0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlsxwriter</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置系统编码为 UTF-8，处理中文乱码问题</span></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data_to_excel</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    把数据写入 xlsx 文件</div><div class="line">    '''</div><div class="line"></div><div class="line">    json_content = load_data_as_json(f_path)</div><div class="line"></div><div class="line">    workbook = xlsxwriter.Workbook(<span class="string">'students.xlsx'</span>)  <span class="comment"># 新建一个 xlsx 文件</span></div><div class="line">    worksheet = workbook.add_worksheet(<span class="string">'student'</span>)  <span class="comment"># 添加 xlsx 表单</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(json_content)):  <span class="comment"># 把 json 数据写入表单单元格中</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> j, item <span class="keyword">in</span> enumerate(json_content[str(i + <span class="number">1</span>)]):</div><div class="line"></div><div class="line">            worksheet.write(i, <span class="number">0</span>, i + <span class="number">1</span>)</div><div class="line">            worksheet.write(i, j + <span class="number">1</span>, item)</div><div class="line"></div><div class="line">    workbook.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_as_json</span><span class="params">(f_path)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将载入的 txt 文件转换成 json 数据格式</div><div class="line">    '''</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(f_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line"></div><div class="line">        content = f.read()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> json.loads(content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    f_path = <span class="string">'students.txt'</span></div><div class="line"></div><div class="line">    write_data_to_excel(f_path)</div><div class="line"></div></pre></td></tr></table></figure>
<p>主要目的是练习 Python 对 Excel 文件的读写操作（此题只涉及写操作），使用的第三方库是 <a href="https://xlsxwriter.readthedocs.org/" rel="external nofollow noopener noreferrer" target="_blank">XlsxWriter</a>，同时用到的知识有 <a href="https://docs.python.org/2/library/json.html" rel="external nofollow noopener noreferrer" target="_blank">Python 中的 json 数据格式</a>。</p>
<p>首先载入 <code>students.txt</code> 文件，把 txt 内容转换成 json 格式 <code>json.loads(self, args)</code>，然后取出 json 格式中的数据，依次填入 Excel 表格中相应单元格里 <code>worksheet.write(self, args)</code>，最后关闭 Excel 文件 <code>workbook.close(self, args)</code>。在此之前，需要先初始化一个 Excel 表格 <code>xlsxwriter.Workbook(self, args)</code>，添加一个表单 <code>workbook.add_worksheet(self, args)</code></p>
<p>当然，操作 Excel 也可以选用 XlsxWriter 以外的其他第三方库。</p>
<p>题目来源：<a href="https://github.com/Yixiaohan/show-me-the-code" rel="external nofollow noopener noreferrer" target="_blank">Python 练习册，每天一个小程序</a> THX!</p>
]]></content>
    
    <summary type="html">
    
      Write Data to Excel
    
    </summary>
    
      <category term="Python" scheme="https://blog.nssimacer.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.nssimacer.tech/tags/Python/"/>
    
      <category term="Exercise" scheme="https://blog.nssimacer.tech/tags/Exercise/"/>
    
  </entry>
  
</feed>
